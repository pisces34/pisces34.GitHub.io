<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>203. 移除链表元素</title>
    <link href="/2021/08/01/leetcode/removeLinkedList/"/>
    <url>/2021/08/01/leetcode/removeLinkedList/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">https://leetcode-cn.com/problems/remove-linked-list-elements/</a></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>执行用时：52 ms, 在所有 Swift 提交中击败了97.20%的用户<br>内存消耗：15.3 MB, 在所有 Swift 提交中击败了53.20%的用户</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>两根指针效率和一根指针在这里差距不大，也挺好理解</p><p>一根指针的情况就是只有pre，判断pre.next的值，如果要删除，就使pre.next 指向删除节点的next也就是pre.next.next<br>两根指针的情况分析：<br>1，首先设置虚拟头节点<br>2，慢指针指向头节点，处于前一个位置<br>3，cur指针指向真实的头节点<br>4，当cur的节点值和传入的val相等时，向后移动cur<br>5，使前一个指针pre指向更新后的cur<br>6，如果不想等则pre 和 cur一起向后移动</p><h3 id="两根指针代码"><a href="#两根指针代码" class="headerlink" title="两根指针代码"></a>两根指针代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeElements</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?, <span class="hljs-keyword">_</span> <span class="hljs-params">val</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">ListNode</span>? &#123;<br>        <span class="hljs-keyword">var</span> dummy <span class="hljs-operator">=</span> <span class="hljs-type">ListNode</span>(<span class="hljs-number">0</span>,head)<br>        <span class="hljs-keyword">var</span> pre <span class="hljs-operator">=</span> dummy<br>        <span class="hljs-keyword">var</span> cur <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">while</span> cur <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">if</span> cur<span class="hljs-operator">?</span>.val <span class="hljs-operator">==</span> val &#123;<br>                cur <span class="hljs-operator">=</span> cur<span class="hljs-operator">?</span>.next<br>                pre.next <span class="hljs-operator">=</span> cur<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                cur <span class="hljs-operator">=</span> cur<span class="hljs-operator">?</span>.next<br>                pre <span class="hljs-operator">=</span> pre.next<span class="hljs-operator">!</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行用时：56 ms, 在所有 Swift 提交中击败了94.80%的用户<br>内存消耗：15.3 MB, 在所有 Swift 提交中击败了44.80%的用户</p><h3 id="一根指针代码"><a href="#一根指针代码" class="headerlink" title="一根指针代码"></a>一根指针代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeElements</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?, <span class="hljs-keyword">_</span> <span class="hljs-params">val</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">ListNode</span>? &#123;<br>        <span class="hljs-keyword">var</span> dummy <span class="hljs-operator">=</span> <span class="hljs-type">ListNode</span>(<span class="hljs-number">0</span>,head)<br>        <span class="hljs-keyword">var</span> pre <span class="hljs-operator">=</span> dummy<br>        <span class="hljs-keyword">while</span> pre.next <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">if</span> pre.next<span class="hljs-operator">?</span>.val <span class="hljs-operator">==</span> val &#123;<br>                pre.next <span class="hljs-operator">=</span> pre.next<span class="hljs-operator">?</span>.next<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                pre <span class="hljs-operator">=</span> pre.next<span class="hljs-operator">!</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1337. 矩阵中战斗力最弱的 K 行</title>
    <link href="/2021/08/01/leetcode/the-k/"/>
    <url>/2021/08/01/leetcode/the-k/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix/">https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix/</a></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>执行用时：76 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：13.8 MB, 在所有 Swift 提交中击败了100.00%的用户</p><p>在按行统计每行士兵数量的数组中，下标即原矩阵的行数，用对应值在另一个排序后的数组匹配，<br>匹配成功时的下标就是顺序数组的下标。修改统计数组中的值，下次再匹配到相同的值也就是之后的行数。</p><p>1，先统计矩阵每一行1的数量，记录到第一个数组diff<br>2，拷贝到新数组copy<br>3，给diff数组排序<br>4，初始化res数组<br>5，在copy这个按行顺序排列的数组中，寻找与排序后diff中相同的元素<br>6，找到后即修改顺序数组copy中的元素值，避免重复匹配，记录下标，跳出循环，<br>7，i向后移动，用diff中下一个元素继续在顺序数组copy中匹配</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">kWeakestRows</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">mat</span>: [[<span class="hljs-type">Int</span>]], <span class="hljs-keyword">_</span> <span class="hljs-params">k</span>: <span class="hljs-type">Int</span>)</span> -&gt; [<span class="hljs-type">Int</span>] &#123;<br>        <span class="hljs-keyword">var</span> diff <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>](repeating: <span class="hljs-number">0</span>, count: mat.count)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> mat.count &#123;<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> mat[i].count &#123;<br>                <span class="hljs-keyword">if</span> mat[i][j] <span class="hljs-operator">==</span> <span class="hljs-number">1</span> &#123;<br>                    diff[i] <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">var</span> copy <span class="hljs-operator">=</span> diff<br>        diff.sort()<br>        <span class="hljs-keyword">var</span> res <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>](repeating: <span class="hljs-number">0</span>, count: k)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> k &#123;<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> diff.count &#123;<br>                <span class="hljs-keyword">if</span> copy[j] <span class="hljs-operator">==</span> diff [i] &#123;<br>                    copy[j] <span class="hljs-operator">=</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>                    res[i] <span class="hljs-operator">=</span> j<br>                    <span class="hljs-keyword">break</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19. 删除链表的倒数第 N 个结点</title>
    <link href="/2021/07/31/leetcode/remove-nth-node/"/>
    <url>/2021/07/31/leetcode/remove-nth-node/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/</a><br>执行用时：0 ms, 在所有 C++ 提交中击败了100.00%的用户<br>内存消耗：10.3 MB, 在所有 C++ 提交中击败了75.79%的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode* head, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        ListNode *fast = head;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (fast-&gt;next)&#123;<br>            fast = fast-&gt;next;<br>            count++;    <span class="hljs-comment">//最后一个节点前的节点数</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(count + <span class="hljs-number">1</span> == n)&#123;<br>            head = head-&gt;next;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            count = count  - n;<br>            <span class="hljs-keyword">if</span>(count == <span class="hljs-number">0</span> &amp;&amp; n == <span class="hljs-number">1</span>)&#123;<br>                head-&gt;next = <span class="hljs-literal">NULL</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                fast = head;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; count; ++i) &#123;<br>                    fast = fast-&gt;next;<br>                &#125;<br>                fast-&gt;next = fast-&gt;next-&gt;next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>设置慢指针指向头节点之前的新节点，当快指针先走n步后，和慢指针中间就隔了n个节点。<br>同时开始移动，当快指针移动到最后一个节点之后的空节点时，慢指针后面有n个节点，<br>于是倒数第n个节点就是慢指针后面的那个节点。</p><p>当链表中只有一个节点时，因为头节点前还一个节点，末尾又有一个节点，<br>删除唯一的节点时，就产生了和普通情况下删除中间节点一样的条件。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>执行用时：4 ms, 在所有 Swift 提交中击败了98.73%的用户<br>内存消耗：13.6 MB, 在所有 Swift 提交中击败了37.06%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeNthFromEnd</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?, <span class="hljs-keyword">_</span> <span class="hljs-params">n</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">ListNode</span>? &#123;<br>        <span class="hljs-keyword">var</span> beforeHead <span class="hljs-operator">=</span> <span class="hljs-type">ListNode</span>(<span class="hljs-number">0</span>, head)<br>        <span class="hljs-keyword">var</span> slow <span class="hljs-operator">=</span> beforeHead, fast <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">for</span> <span class="hljs-keyword">_</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span>n &#123;<br>            fast <span class="hljs-operator">=</span> fast<span class="hljs-operator">?</span>.next<br>        &#125;<br>        <span class="hljs-keyword">while</span> fast <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            fast <span class="hljs-operator">=</span> fast<span class="hljs-operator">?</span>.next<br>            slow <span class="hljs-operator">=</span> slow.next <span class="hljs-operator">??</span> beforeHead<br>        &#125;<br>        slow.next <span class="hljs-operator">=</span> slow.next<span class="hljs-operator">?</span>.next<br>        <span class="hljs-keyword">return</span> beforeHead.next<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>双指针</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>242. 有效的字母异位词</title>
    <link href="/2021/07/31/leetcode/validanagram/"/>
    <url>/2021/07/31/leetcode/validanagram/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/valid-anagram/">https://leetcode-cn.com/problems/valid-anagram/</a></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>执行用时：16 ms, 在所有 Swift 提交中击败了99.02%的用户<br>内存消耗：14 MB, 在所有 Swift 提交中击败了78.43%的用户</p><p>排序字符串 或者 计数器<br>因为C++中 只要-‘a’就转换成整数了，结果swift就卡在了讲a转为可运算的整数这里，参考了楼上的计数器题解</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isAnagram</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">s</span>: <span class="hljs-type">String</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">t</span>: <span class="hljs-type">String</span>)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">if</span> s.count <span class="hljs-operator">!=</span> t.count &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-comment">// 都是小写字母，设定26个0</span><br>        <span class="hljs-keyword">var</span> arr <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>](repeating: <span class="hljs-number">0</span>, count: <span class="hljs-number">26</span>)<br>        <span class="hljs-keyword">let</span> aChar <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>(<span class="hljs-string">&quot;a&quot;</span>.unicodeScalars.first<span class="hljs-operator">!</span>.value)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s.unicodeScalars &#123;<br>            arr[<span class="hljs-type">Int</span>(i.value) <span class="hljs-operator">-</span> aChar] <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> t.unicodeScalars &#123;<br>            arr[<span class="hljs-type">Int</span>(j.value) <span class="hljs-operator">-</span> aChar] <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-comment">//遇到第一个小于0的说明该字符在另一串中没有出现过</span><br>        <span class="hljs-keyword">if</span> arr.first(where: &#123;<span class="hljs-variable">$0</span> <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span> &#125;) <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>执行用时：4 ms, 在所有 Swift 提交中击败了97.63%的用户<br>内存消耗：7.1 MB, 在所有 Swift 提交中击败了70.26%的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isAnagram</span><span class="hljs-params">(string s, string t)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">length</span>() != t.<span class="hljs-built_in">length</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">int</span> arr[<span class="hljs-number">26</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">length</span>(); ++i) &#123;<br>            arr[s[i]-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; t.<span class="hljs-built_in">length</span>(); ++i) &#123;<br>            arr[t[i]-<span class="hljs-string">&#x27;a&#x27;</span>]--;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>字符串</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160. 相交链表</title>
    <link href="/2021/07/30/leetcode/intersectionTwo/"/>
    <url>/2021/07/30/leetcode/intersectionTwo/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</a></p><p>执行用时：268 ms, 在所有 Swift 提交中击败了95.76%的用户<br>内存消耗：16.7 MB, 在所有 Swift 提交中击败了40.39%的用户</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>重点在于理清某一指针走到尾部时要放到另一条链表的头部，搭配官方题解更容易理解</p><p>1，先对链表进行判空，链表任意一个为空节点就不会相交<br>2，设定两个指针指向各自头节点<br>3，关键在于相遇节点时，p1经过了x长度，p2经过了y长度，余下要走的长度都是z<br>4，当x&lt;y时, 那么先走完z的指针一定是p1，使它回到较长的那条链表的头节点<br>5，此时仍在较长链表的p2 距离走到尾部剩余的长度就是 y-x<br>6，p1和p2继续移动，当p2走到末尾，使其回到较短链表的头节点，那它距离相遇点的长度就是x<br>7，此时p1也经过了y-x的距离，最后两指针都经过x长度，p1就是 y-x+x = y 到达相遇点<br>8，如果没有相交点，指针将会同时走到y长度的终点，也就是链表尾部，返回的就是空指针</p><p>使用双层for循环会超时，C++可以. 还可以使用哈希表存储访问过的节点地址。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>Swift</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getIntersectionNode</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">headA</span>: <span class="hljs-type">ListNode</span>?, <span class="hljs-keyword">_</span> <span class="hljs-params">headB</span>: <span class="hljs-type">ListNode</span>?)</span> -&gt; <span class="hljs-type">ListNode</span>? &#123;<br>        <span class="hljs-keyword">if</span> headA <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">||</span> headB <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> p1 <span class="hljs-operator">=</span> headA<br>        <span class="hljs-keyword">var</span> p2 <span class="hljs-operator">=</span> headB<br>        <span class="hljs-keyword">while</span> p1 <span class="hljs-operator">!==</span> p2 &#123;<br>            p1 <span class="hljs-operator">=</span> p1 <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">?</span> headB : p1<span class="hljs-operator">?</span>.next<br>            p2 <span class="hljs-operator">=</span> p2 <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">?</span> headA : p2<span class="hljs-operator">?</span>.next<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> p1<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++ 快慢指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode *headA, ListNode *headB)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (headA == <span class="hljs-literal">nullptr</span> || headB == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>        ListNode *p = headA, *q = headB;<br>        <span class="hljs-keyword">while</span>(p != q)&#123;<br>           q = q == <span class="hljs-literal">nullptr</span> ? headA : q-&gt;next;<br>           p = p == <span class="hljs-literal">nullptr</span> ? headB : p-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>C++ 暴力循环</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode *headA, ListNode *headB)</span> </span>&#123;<br>        ListNode *up = headA;<br>        ListNode *down = headB;<br>        <span class="hljs-keyword">while</span> (up != <span class="hljs-literal">nullptr</span>)&#123;<br>            down = headB;<br>            <span class="hljs-keyword">while</span> (down != <span class="hljs-literal">nullptr</span>)&#123;<br>                <span class="hljs-keyword">if</span>(down == up)&#123;<br>                    <span class="hljs-keyword">return</span> up;<br>                &#125;<br>                down = down-&gt;next;<br>            &#125;<br>            up = up-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>双指针</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>142. 环形链表 II</title>
    <link href="/2021/07/29/leetcode/circleLinked2/"/>
    <url>/2021/07/29/leetcode/circleLinked2/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">https://leetcode-cn.com/problems/linked-list-cycle-ii/</a></p><p>解释来自于魏梦舒的《算法漫画》，简单概括成文字<br>（头节点）————D——（入环点）———S1———（首次相遇点）————S2————（回到入环点）<br>距离分别为 D S1 S2<br>1，慢指针每次走一步，到达相遇点时经过了 D+S1的距离<br>2，快指针每次走两步，当它到第一次到相遇点时经过了D+S1的距离，但是此时慢指针还未达到相遇点<br>3，所以它会一直在环里打圈，大概是n圈后才等到慢指针到达相遇点，环的长度一圈为S1+S2，那么快指针走过的总长度就是D+S1+n（S1+S2）<br>4，因为快指针速度是慢指针的两倍，同时出发经过相同时间，快指针走过的距离即慢指针的两倍<br>5，可以推出 2(D+S1) = D+S1+n(S1+S2)<br>6，整理后即为 D = (n-1)(S1+S2)+S2<br>7，D的距离就是从头节点到入环点的距离，等于经过（n-1）圈再加上S2的距离<br>8，假设经过1圈相遇，D = S2，此时慢指针从相遇点开始移动，快指针回到头节点向后移动，相等时即为入环点</p><p>无论是多少圈，等式右边表示慢指针之后将要移动的距离，都等于等式左边的D，遍历完D的长度就到了入环点。<br>注意判断传入的空链表和长度为1的链表。</p><p>执行用时：52 ms, 在所有 Swift 提交中击败了95.43%的用户<br>内存消耗：14.9 MB, 在所有 Swift 提交中击败了77.14%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">detectCycle</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?)</span> -&gt; <span class="hljs-type">ListNode</span>? &#123;<br>        <span class="hljs-keyword">var</span> fast <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">var</span> slow <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">while</span> fast <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">&amp;&amp;</span> fast<span class="hljs-operator">?</span>.next <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            fast <span class="hljs-operator">=</span> fast<span class="hljs-operator">?</span>.next<span class="hljs-operator">?</span>.next<br>            slow <span class="hljs-operator">=</span> slow<span class="hljs-operator">?</span>.next<br>            <span class="hljs-keyword">if</span> fast <span class="hljs-operator">===</span> slow &#123;<br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> fast <span class="hljs-operator">===</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">||</span> fast<span class="hljs-operator">?</span>.next <span class="hljs-operator">===</span> <span class="hljs-literal">nil</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;<br>        fast <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">while</span> fast <span class="hljs-operator">!==</span> slow &#123;<br>            fast <span class="hljs-operator">=</span> fast<span class="hljs-operator">?</span>.next<br>            slow <span class="hljs-operator">=</span> slow<span class="hljs-operator">?</span>.next<br>        &#125;<br>        <span class="hljs-keyword">return</span> fast<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行用时：8 ms, 在所有 C++ 提交中击败了88.53%的用户<br>内存消耗：7.5 MB, 在所有 C++ 提交中击败了63.93%的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>        ListNode *fast = head;<br>        ListNode *slow = head;<br>        <span class="hljs-keyword">while</span> (fast &amp;&amp; fast-&gt;next)&#123;<br>            fast = fast-&gt;next-&gt;next;<br>            slow = slow-&gt;next;<br>            <span class="hljs-keyword">if</span> (slow == fast)&#123;<span class="hljs-keyword">break</span>;&#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (fast == <span class="hljs-literal">NULL</span> || fast-&gt;next == <span class="hljs-literal">NULL</span> )&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;&#125;<br>        fast = head;<br>        <span class="hljs-keyword">while</span> (fast != slow)&#123;<br>            fast = fast-&gt;next;<br>            slow = slow-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fast;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>双指针</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>141. 环形链表</title>
    <link href="/2021/07/29/leetcode/circleLinke/"/>
    <url>/2021/07/29/leetcode/circleLinke/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/linked-list-cycle/">https://leetcode-cn.com/problems/linked-list-cycle/</a><br>类比于操场跑步。快指针每次走两步，慢指针每次走一步，如果存在环，快指针一定会与慢指针相遇。</p><p>执行用时：64 ms, 在所有 Swift 提交中击败了96.77%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hasCycle</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">if</span> head <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> fast <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">var</span> slow <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">while</span> fast <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">&amp;&amp;</span> fast<span class="hljs-operator">?</span>.next <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            fast <span class="hljs-operator">=</span> fast<span class="hljs-operator">?</span>.next<span class="hljs-operator">?</span>.next<br>            slow <span class="hljs-operator">=</span> slow<span class="hljs-operator">?</span>.next<br>            <span class="hljs-keyword">if</span> fast <span class="hljs-operator">===</span> slow &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>除了用map来存指针地址之外，题目val的值是有范围的，所以将访问过的值修改为区间以外的即可当作标志。<br>下次访问时若值为这个标志说明指针已经指回到了前面访问过的节点。</p><p>执行用时：68 ms, 在所有 Swift 提交中击败了88.17%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hasCycle</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">if</span> head <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>&#125;<br>        <span class="hljs-keyword">var</span> fast <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">var</span> slow <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">while</span> fast <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">&amp;&amp;</span> fast<span class="hljs-operator">?</span>.next <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            fast <span class="hljs-operator">=</span> fast<span class="hljs-operator">?</span>.next<span class="hljs-operator">?</span>.next<br>            slow <span class="hljs-operator">=</span> slow<span class="hljs-operator">?</span>.next<br>            <span class="hljs-keyword">if</span> fast <span class="hljs-operator">===</span> slow &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行用时：4 ms, 在所有 C++ 提交中击败了99.77%的用户<br>内存消耗：8 MB, 在所有 C++ 提交中击败了30.61%的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        ListNode *point = head;<br>        <span class="hljs-keyword">while</span> (point-&gt;next != <span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-keyword">if</span> (point-&gt;val == <span class="hljs-number">100001</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            point-&gt;val = <span class="hljs-number">100001</span>;<br>            point = point-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>双指针</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7. 整数反转</title>
    <link href="/2021/07/27/leetcode/reverseInt/"/>
    <url>/2021/07/27/leetcode/reverseInt/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/reverse-integer/">https://leetcode-cn.com/problems/reverse-integer/</a><br>执行用时：0 ms, 在所有 C++ 提交中击败了100.00%的用户<br>内存消耗：5.8 MB, 在所有 C++ 提交中击败了51.54%的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (x!=<span class="hljs-number">0</span>)&#123;<br>            res = res*<span class="hljs-number">10</span> + x%<span class="hljs-number">10</span>;<br>            x /= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (res&gt;<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">31</span>)<span class="hljs-number">-1</span> || res&lt;(<span class="hljs-built_in">pow</span>(<span class="hljs-number">-2</span>,<span class="hljs-number">31</span>)))&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>执行用时： 4 ms , 在所有 Swift 提交中击败了 95.41% 的用户<br>内存消耗:13.7 MB , 在所有 Swift 提交中击败了 25.63% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverse</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">x</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> value <span class="hljs-operator">=</span> x<br>        <span class="hljs-keyword">var</span> res <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> value <span class="hljs-operator">!=</span> <span class="hljs-number">0</span> &#123;<br>            res <span class="hljs-operator">=</span> res<span class="hljs-operator">*</span><span class="hljs-number">10</span> <span class="hljs-operator">+</span> value<span class="hljs-operator">%</span><span class="hljs-number">10</span><br>            <span class="hljs-keyword">if</span> res <span class="hljs-operator">&gt;</span> <span class="hljs-type">Int32</span>.max <span class="hljs-operator">||</span> res <span class="hljs-operator">&lt;</span> <span class="hljs-type">Int32</span>.min &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            &#125;<br>            value <span class="hljs-operator">/=</span> <span class="hljs-number">10</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9. 回文数</title>
    <link href="/2021/07/27/leetcode/huinum/"/>
    <url>/2021/07/27/leetcode/huinum/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/palindrome-number/">https://leetcode-cn.com/problems/palindrome-number/</a><br>执行用时：32 ms, 在所有 Swift 提交中击败了97.60%的用户<br>内存消耗: 13.6MB, 在所有 Swift 提交中击败了81.97%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isPalindrome</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">x</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">if</span> x <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> value <span class="hljs-operator">=</span> x<br>        <span class="hljs-keyword">var</span> res <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> value <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> &#123;<br>            res <span class="hljs-operator">=</span> res<span class="hljs-operator">*</span><span class="hljs-number">10</span> <span class="hljs-operator">+</span> (value <span class="hljs-operator">%</span> <span class="hljs-number">10</span>)<br>            value <span class="hljs-operator">/=</span> <span class="hljs-number">10</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> res <span class="hljs-operator">==</span> x<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>回文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>707. 设计链表</title>
    <link href="/2021/07/24/leetcode/designLinkedList/"/>
    <url>/2021/07/24/leetcode/designLinkedList/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/design-linked-list/">https://leetcode-cn.com/problems/design-linked-list/</a><br>执行用时：340 ms, 在所有 Swift 提交中击败了55.54%的用户<br>内存消耗：14.1 MB, 在所有 Swift 提交中击败了80.33%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLinkedList</span> </span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>        <span class="hljs-keyword">var</span> element: <span class="hljs-type">Int</span>        <span class="hljs-comment">//元素值</span><br>        <span class="hljs-keyword">var</span> next: <span class="hljs-type">ListNode</span>?     <span class="hljs-comment">//下个节点</span><br>        <span class="hljs-function"><span class="hljs-keyword">init</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">element</span>: <span class="hljs-type">Int</span>)</span> &#123;  <span class="hljs-comment">//初始化传值</span><br>            <span class="hljs-keyword">self</span>.element <span class="hljs-operator">=</span> element<br>            <span class="hljs-keyword">self</span>.next <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">var</span> head: <span class="hljs-type">ListNode</span>?<br>    <span class="hljs-keyword">var</span> size: <span class="hljs-type">Int</span><br>    <span class="hljs-comment">/** Initialize your data structure here. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">init</span>()</span> &#123;<br>        head <span class="hljs-operator">=</span> <span class="hljs-type">ListNode</span>(<span class="hljs-number">0</span>)  <span class="hljs-comment">//初始化头节点</span><br>        size <span class="hljs-operator">=</span> <span class="hljs-number">0</span>            <span class="hljs-comment">//长度</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">get</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">index</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">if</span> index <span class="hljs-operator">&gt;</span> (size<span class="hljs-operator">-</span><span class="hljs-number">1</span>) <span class="hljs-operator">||</span> index <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span>  &#123; <br>            <span class="hljs-keyword">return</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> cur <span class="hljs-operator">=</span> head<span class="hljs-operator">?</span>.next    <span class="hljs-comment">//指向头节点后的第一个节点</span><br>        <span class="hljs-keyword">var</span> step <span class="hljs-operator">=</span> index<br>        <span class="hljs-keyword">while</span> step <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> &#123;<br>            cur <span class="hljs-operator">=</span> cur<span class="hljs-operator">?</span>.next     <span class="hljs-comment">//指针向后移动</span><br>            step <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> cur<span class="hljs-operator">!</span>.element     <span class="hljs-comment">//返回当前节点元素</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addAtHead</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">val</span>: <span class="hljs-type">Int</span>)</span> &#123;    <span class="hljs-comment">//头插法</span><br>        <span class="hljs-keyword">let</span> cur <span class="hljs-operator">=</span> <span class="hljs-type">ListNode</span>(val)     <span class="hljs-comment">//初始化给新节点赋值</span><br>        cur.next <span class="hljs-operator">=</span> head<span class="hljs-operator">?</span>.next       <span class="hljs-comment">//当前插入节点指向第一个节点</span><br>        head<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> cur            <span class="hljs-comment">//移动头节点指向插入节点</span><br>        size <span class="hljs-operator">+=</span> <span class="hljs-number">1</span>                   <span class="hljs-comment">//长度+1</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/** Append a node of value val to the last element of the linked list. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addAtTail</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">val</span>: <span class="hljs-type">Int</span>)</span> &#123;<br>        <span class="hljs-keyword">let</span> cur <span class="hljs-operator">=</span> <span class="hljs-type">ListNode</span>(val)<br>        <span class="hljs-keyword">var</span> tail <span class="hljs-operator">=</span> head                 <span class="hljs-comment">//尾指针指向头节点</span><br>        <span class="hljs-keyword">while</span> ((tail<span class="hljs-operator">!</span>.next) <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span>) &#123;   <span class="hljs-comment">//判断是否在尾部</span><br>            tail <span class="hljs-operator">=</span> tail<span class="hljs-operator">?</span>.next<br>        &#125;<br>        cur.next <span class="hljs-operator">=</span> tail<span class="hljs-operator">!</span>.next           <span class="hljs-comment">//插入节点指向空</span><br>        tail<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> cur                <span class="hljs-comment">//当前最后一个尾节点指向插入节点</span><br>        size <span class="hljs-operator">+=</span> <span class="hljs-number">1</span>                       <span class="hljs-comment">//长度+1</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addAtIndex</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">index</span>: <span class="hljs-type">Int</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">val</span>: <span class="hljs-type">Int</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> index <span class="hljs-operator">&gt;=</span> <span class="hljs-number">0</span> <span class="hljs-operator">&amp;&amp;</span> index <span class="hljs-operator">&lt;=</span> size &#123;        <span class="hljs-comment">//判断插入索引是否在有效区间</span><br>            <span class="hljs-keyword">let</span> newNode <span class="hljs-operator">=</span> <span class="hljs-type">ListNode</span>(val)         <span class="hljs-comment">//创建新节点并赋值</span><br>            <span class="hljs-keyword">var</span> pre <span class="hljs-operator">=</span> head                      <span class="hljs-comment">//定义一个指针来移动找到插入位置</span><br>            <span class="hljs-keyword">var</span> step <span class="hljs-operator">=</span> index<br>            <span class="hljs-keyword">while</span> step <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> &#123;<br>                pre <span class="hljs-operator">=</span> pre<span class="hljs-operator">?</span>.next                 <br>                step <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>            &#125;                                   <span class="hljs-comment">//插入前index所指位置为pre所指下一个节点</span><br>            newNode.next <span class="hljs-operator">=</span> pre<span class="hljs-operator">?</span>.next            <span class="hljs-comment">//插入节点指向pre后一个节点</span><br>            pre<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> newNode                 <span class="hljs-comment">//pre指向新插入节点</span><br>            size <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">/** Delete the index-th node in the linked list, if the index is valid. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deleteAtIndex</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">index</span>: <span class="hljs-type">Int</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span>) <span class="hljs-operator">||</span> (index <span class="hljs-operator">&gt;=</span> size) &#123;     <span class="hljs-comment">//判断索引是否在有效区间</span><br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> pre <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">var</span> step <span class="hljs-operator">=</span> index<br>        <span class="hljs-keyword">while</span> step <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> &#123;                       <span class="hljs-comment">//移动指针到指定删除位置前一个节点处</span><br>            pre <span class="hljs-operator">=</span> pre<span class="hljs-operator">?</span>.next<br>            step <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>        &#125;<br>        pre<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> pre<span class="hljs-operator">?</span>.next<span class="hljs-operator">?</span>.next            <span class="hljs-comment">//将要删除节点处的下一处节点位置赋给前一个节点的指针</span><br>        size <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>执行用时：32 ms, 在所有 C++ 提交中击败了99.11% 的用户<br>内存消耗：19.1 MB, 在所有 C++ 提交中击败了45.07% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLinkedList</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/** Initialize your data structure here. */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SinglyListNode</span> &#123;</span><br>        <span class="hljs-keyword">int</span> val;<br>        SinglyListNode *next;<br>        <span class="hljs-built_in">SinglyListNode</span>(<span class="hljs-keyword">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<br>    &#125;;<br>    SinglyListNode *head;<br>    <span class="hljs-keyword">int</span> size;<br>    <span class="hljs-built_in">MyLinkedList</span>() &#123;<br>        head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SinglyListNode</span>(<span class="hljs-number">0</span>);<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (index &gt; (size<span class="hljs-number">-1</span>) || index &lt;<span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;<br>        SinglyListNode *cur = head-&gt;next;<br>        <span class="hljs-keyword">while</span> (index--) cur = cur-&gt;next;<br>        <span class="hljs-keyword">return</span> cur-&gt;val;<br>    &#125;<br><br>    <span class="hljs-comment">/** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addAtHead</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        SinglyListNode *node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SinglyListNode</span>(val);<br>        node-&gt;next = head-&gt;next;<br>        head-&gt;next = node;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-comment">/** Append a node of value val to the last element of the linked list. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addAtTail</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        SinglyListNode *node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SinglyListNode</span>(val);<br>        SinglyListNode *tail = head;<br>        <span class="hljs-keyword">while</span> (tail-&gt;next) tail = tail-&gt;next;<br>        node-&gt;next = tail-&gt;next;<br>        tail-&gt;next = node;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-comment">/** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addAtIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (index &gt;=<span class="hljs-number">0</span> &amp;&amp; index &lt;= size) &#123;<br>            SinglyListNode *node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SinglyListNode</span>(val);<br>            SinglyListNode *cur = head;<br>            <span class="hljs-keyword">while</span> (index--) cur = cur-&gt;next;<br>            node-&gt;next = cur-&gt;next;<br>            cur-&gt;next = node;<br>            size++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/** Delete the index-th node in the linked list, if the index is valid. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">0</span> || index &gt;= size) <span class="hljs-keyword">return</span> ;<br>        SinglyListNode *cur = head;<br>        <span class="hljs-keyword">while</span> (index--) cur = cur-&gt;next;<br>        cur-&gt;next = cur-&gt;next-&gt;next;<br>        size--;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>链表</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>283. 移动零</title>
    <link href="/2021/07/23/leetcode/moveZero/"/>
    <url>/2021/07/23/leetcode/moveZero/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/move-zeroes/">https://leetcode-cn.com/problems/move-zeroes/</a><br>执行用时：32 ms, 在所有 Swift 提交中击败了99.72%的用户<br>内存消耗：14 MB, 在所有 Swift 提交中击败了90.08%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">moveZeroes</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: <span class="hljs-keyword">inout</span> [<span class="hljs-type">Int</span>])</span> &#123;<br>        <span class="hljs-keyword">var</span> slow <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span>nums.count &#123;<br>            <span class="hljs-keyword">if</span> nums[i] <span class="hljs-operator">==</span> <span class="hljs-number">0</span> <span class="hljs-operator">&amp;&amp;</span> nums[slow] <span class="hljs-operator">!=</span> <span class="hljs-number">0</span> &#123;<br>                slow <span class="hljs-operator">=</span> i<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> nums[i] <span class="hljs-operator">!=</span> <span class="hljs-number">0</span> <span class="hljs-operator">&amp;&amp;</span> nums[slow] <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>                nums[slow] <span class="hljs-operator">=</span> nums[i]<br>                slow <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                nums[i] <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>双指针</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>26. 删除有序数组中的重复项</title>
    <link href="/2021/07/22/leetcode/removeDuplicate/"/>
    <url>/2021/07/22/leetcode/removeDuplicate/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/</a><br>执行用时：68 ms, 在所有 Swift 提交中击败了94.44%的用户<br>内存消耗：14.4 MB, 在所有 Swift 提交中击败了61.90%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeDuplicates</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: <span class="hljs-keyword">inout</span> [<span class="hljs-type">Int</span>])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> low <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> nums.isEmpty &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> nums.count &#123;<br>            <span class="hljs-keyword">if</span> nums[low] <span class="hljs-operator">!=</span> nums[i] &#123;<br>                low <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                nums[low] <span class="hljs-operator">=</span> nums[i]<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> low<span class="hljs-operator">+</span><span class="hljs-number">1</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行用时：4 ms, 在所有 C++ 提交中击败了99.00%的用户<br>内存消耗：17.8 MB, 在所有 C++ 提交中击败了16.35%的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">empty</span>()) &#123; <span class="hljs-keyword">return</span> low; &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            <span class="hljs-keyword">if</span> (nums[low] != nums[i]) &#123;<br>                nums[++low] = nums[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> low + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>链表</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>153. 寻找旋转排序数组中的最小值</title>
    <link href="/2021/07/22/leetcode/findMin/"/>
    <url>/2021/07/22/leetcode/findMin/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/">https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/</a><br>二分法, 刚刚开始学习Swift<br>执行用时：16 ms, 在所有 Swift 提交中击败了88.24%的用户<br>内存消耗：13.7 MB, 在所有 Swift 提交中击败了50.98%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findMin</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: [<span class="hljs-type">Int</span>])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> low <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">var</span> high <span class="hljs-operator">=</span> nums.count <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> low <span class="hljs-operator">&lt;</span> high &#123;<br>            <span class="hljs-keyword">var</span> pivot <span class="hljs-operator">=</span> low <span class="hljs-operator">+</span> (high <span class="hljs-operator">-</span> low)<span class="hljs-operator">/</span><span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[high] <span class="hljs-operator">&gt;</span> nums[pivot] &#123;<br>                high <span class="hljs-operator">=</span> pivot<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                low <span class="hljs-operator">=</span> pivot <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums[low]<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>普通O(n)<br>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：37.9 MB, 在所有 Java 提交中击败了42.64% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findMin</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> left = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> min = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length-<span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i]&gt;nums[i+<span class="hljs-number">1</span>])&#123;<br>                min = nums[i+<span class="hljs-number">1</span>];<br>                flag = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> min;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>二分法</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>557. 反转字符串中的单词 III</title>
    <link href="/2021/07/04/leetcode/reverseStr3/"/>
    <url>/2021/07/04/leetcode/reverseStr3/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/">https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/</a></p><p>执行用时：9 ms, 在所有 Java 提交中击败了48.91% 的用户<br>内存消耗：39.2 MB, 在所有 Java 提交中击败了31.61% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">reverseWords</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        StringBuffer res = <span class="hljs-keyword">new</span> StringBuffer();<br>        s+=<span class="hljs-string">&quot; &quot;</span>;<br>        StringBuffer str = <span class="hljs-keyword">new</span> StringBuffer(s);<br>        str.reverse();<br>        <span class="hljs-keyword">int</span> last = str.length();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = str.length()-<span class="hljs-number">1</span>; i&gt;=<span class="hljs-number">0</span> ; i--) &#123;<br>            <span class="hljs-keyword">if</span> (str.charAt(i)!=<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                res.append(str.substring(i+<span class="hljs-number">1</span>,last));<br>                <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>) &#123;<br>                    res.append(<span class="hljs-string">&#x27; &#x27;</span>);<br>                &#125;<br>                last=i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>119. 杨辉三角 II</title>
    <link href="/2021/07/02/leetcode/yhtriangle2/"/>
    <url>/2021/07/02/leetcode/yhtriangle2/</url>
    
    <content type="html"><![CDATA[<p>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：35.9 MB, 在所有 Java 提交中击败了90.20% 的用户<br>//把118的题里面的修改一下就通过了<br>//其实有线性递推的公式，看了官方题解才注意到。<br>题目链接：<a href="https://leetcode-cn.com/problems/pascals-triangle-ii/">https://leetcode-cn.com/problems/pascals-triangle-ii/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">getRow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rowIndex)</span> </span>&#123;<br>        List&lt;Integer&gt; row = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>        row.add(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= rowIndex; ++i) &#123;<br>            row.add((<span class="hljs-keyword">int</span>) ((<span class="hljs-keyword">long</span>) row.get(i - <span class="hljs-number">1</span>) * (rowIndex - i + <span class="hljs-number">1</span>) / i));<br>        &#125;<br>        <span class="hljs-keyword">return</span> row;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">getRow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rowIndex)</span> </span>&#123;<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= rowIndex; i++) &#123;<br>            List&lt;Integer&gt; L = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> || i == j) &#123;<br>                    L.add(<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    L.add(res.get(i - <span class="hljs-number">1</span>).get(j - <span class="hljs-number">1</span>) + res.get(i - <span class="hljs-number">1</span>).get(j));<br>                &#125;<br>            &#125;<br>            res.add(L);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.get(rowIndex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>118. 杨辉三角</title>
    <link href="/2021/07/01/leetcode/yhtriangle1/"/>
    <url>/2021/07/01/leetcode/yhtriangle1/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/pascals-triangle/">https://leetcode-cn.com/problems/pascals-triangle/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class="hljs-keyword">int</span> numRows) &#123;<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numRows; i++) &#123;<br>            List&lt;Integer&gt; L = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> || i == j) &#123;<br>                    L.add(<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    L.add(res.get(i - <span class="hljs-number">1</span>).get(j - <span class="hljs-number">1</span>) + res.get(i - <span class="hljs-number">1</span>).get(j));<br>                &#125;<br>            &#125;<br>            res.add(L);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>209. 长度最小的子数组</title>
    <link href="/2021/06/21/leetcode/MaxmiumSize/"/>
    <url>/2021/06/21/leetcode/MaxmiumSize/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/">https://leetcode-cn.com/problems/minimum-size-subarray-sum/</a><br>执行用时：152 ms, 在所有 Java 提交中击败了10.69% 的用户<br>内存消耗：38.5 MB, 在所有 Java 提交中击败了33.53% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minSubArrayLen</span><span class="hljs-params">(<span class="hljs-keyword">int</span> target, <span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> len=<span class="hljs-number">100001</span>;<br>        <span class="hljs-keyword">int</span> sum;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (target &lt;= nums[i]) &#123;<br>                len = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            sum=nums[i];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>; j&lt;nums.length;j++) &#123;<br>                sum +=nums[j];<br>                <span class="hljs-keyword">if</span> ( sum&gt;= target) &#123;<br>                    len = Math.min(len,j-i+<span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (len&lt;<span class="hljs-number">100001</span>)&#123;<br>            <span class="hljs-keyword">return</span> len;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>27. 移除元素</title>
    <link href="/2021/06/20/leetcode/removeElement/"/>
    <url>/2021/06/20/leetcode/removeElement/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/remove-element/">https://leetcode-cn.com/problems/remove-element/</a></p><p>执行用时：1 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：36.7 MB, 在所有 Java 提交中击败了96.64% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> temp;<br>        <span class="hljs-keyword">int</span> right = nums.length-<span class="hljs-number">1</span>;<br>        Arrays.sort(nums);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt; nums.length; ++i)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i] !=val)&#123;<br>                count++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i&lt;right)&#123;<br>                temp = nums[i];<br>                <span class="hljs-keyword">if</span> (nums[right]!=temp)&#123;<br>                    nums[i] = nums[right];<br>                    nums[right] = temp;<br>                    count++;<br>                &#125;<br>                right--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>485. 最大连续 1 的个数</title>
    <link href="/2021/06/19/leetcode/findMaxConsequence1/"/>
    <url>/2021/06/19/leetcode/findMaxConsequence1/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/max-consecutive-ones/">https://leetcode-cn.com/problems/max-consecutive-ones/</a></p><p>执行用时：3 ms, 在所有 Java 提交中击败了32.06% 的用户<br>内存消耗：39.8 MB, 在所有 Java 提交中击败了78.24% 的用户<br>双指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findMaxConsecutiveOnes</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> one = <span class="hljs-number">0</span>, zero = <span class="hljs-number">0</span>, res = <span class="hljs-number">0</span>, count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] != <span class="hljs-number">1</span>) &#123;<br>                zero = i - <span class="hljs-number">1</span>;  <span class="hljs-comment">//前一个连续1的终点</span><br>                res = Math.max(zero - one, res);<br>                one = i; <span class="hljs-comment">//下一个连续1的起点</span><br>                count = <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                count++;<br>                res = Math.max(res, count);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行用时：3 ms, 在所有 Java 提交中击败了32.06% 的用户<br>内存消耗：39.8 MB, 在所有 Java 提交中击败了82.46% 的用户<br>贪心算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findMaxConsecutiveOnes</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] == <span class="hljs-number">1</span>)&#123;<br>                sum++;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                res = Math.max(res,sum);<br>                sum = <span class="hljs-number">0</span>;<br>            &#125;<br>            res = Math.max(res,sum);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zoj4106 Lucky 7 in the Pocket</title>
    <link href="/2021/06/19/zoj/zoj4106/"/>
    <url>/2021/06/19/zoj/zoj4106/</url>
    
    <content type="html"><![CDATA[<p>模拟过程<br>Name    Result      Time(ms)    Memory(KB)<br>0        Accepted    5            440</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>  N;<br>    <span class="hljs-keyword">int</span> m,n;<br>    cin&gt;&gt;N;<br>    <span class="hljs-keyword">while</span> (N--)&#123;<br>        cin&gt;&gt;n;<br>        <span class="hljs-keyword">if</span> (n&lt;=<span class="hljs-number">7</span>)&#123;<br>            m=<span class="hljs-number">7</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n%<span class="hljs-number">7</span>==<span class="hljs-number">0</span>&amp;&amp;n%<span class="hljs-number">4</span>!=<span class="hljs-number">0</span>)&#123;<br>            m = n;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            m = (n/<span class="hljs-number">7</span>)*<span class="hljs-number">7</span>+<span class="hljs-number">7</span>;<br>            <span class="hljs-keyword">if</span> (m%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>)&#123;<br>                m = m+<span class="hljs-number">7</span>;<br>            &#125;<br>        &#125;<br>        cout&lt;&lt;m&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>发现规律<br>Name    Result        Time(ms)    Memory(KB)<br>0        Accepted    5            312</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>  N;<br>    <span class="hljs-keyword">int</span> m,n;<br>    cin&gt;&gt;N;<br>    <span class="hljs-keyword">while</span> (N--)&#123;<br>        cin&gt;&gt;n;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &lt;= <span class="hljs-number">105</span>; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (i%<span class="hljs-number">7</span>==<span class="hljs-number">0</span> &amp;&amp; i%<span class="hljs-number">4</span>!=<span class="hljs-number">0</span>)&#123;<br>                cout&lt;&lt;i&lt;&lt;endl;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>zoj算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zoj4105 Abbreviation</title>
    <link href="/2021/06/19/zoj/zoj4105/"/>
    <url>/2021/06/19/zoj/zoj4105/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://zoj.pintia.cn/problem-sets/91827364500/problems/91827370500">https://zoj.pintia.cn/problem-sets/91827364500/problems/91827370500</a></p><p>Name    Result        Time(ms)    Memory(KB)<br>0        Accepted    5            448</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T;<br>    string arr = <span class="hljs-string">&quot;0aeiyou&quot;</span>;<br>    cin&gt;&gt;T;<br>    string str;<br>    <span class="hljs-keyword">while</span> (T--)&#123;<br>        cin&gt;&gt;str;<br>        string res=<span class="hljs-string">&quot;&quot;</span>;<br>        res+=str[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; str.<span class="hljs-built_in">length</span>(); ++i) &#123;<br>            <span class="hljs-keyword">if</span>(arr.<span class="hljs-built_in">find</span>(str[i]) == string::npos)&#123;<br>                res+=str[i];<br>            &#125;<br>        &#125;<br>        cout&lt;&lt;res&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>zoj算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>167. 两数之和 II - 输入有序数组</title>
    <link href="/2021/06/18/leetcode/twoSumsort/"/>
    <url>/2021/06/18/leetcode/twoSumsort/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/">https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/</a><br>和第一题的两数之和有些不同，因为是升序排列的，双指针，map，双循环都可以通过。</p><p>执行用时：1 ms, 在所有 Java 提交中击败了93.85% 的用户<br>内存消耗：38.7 MB, 在所有 Java 提交中击败了47.70% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] numbers, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = numbers.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left&lt;right)&#123;<br>            <span class="hljs-keyword">int</span> mid = left+(right-left)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">int</span> sum = numbers[left]+numbers[right];<br>            <span class="hljs-keyword">if</span> (target == sum)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;left+<span class="hljs-number">1</span>,right+<span class="hljs-number">1</span>&#125;;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target&gt;sum)&#123;<br>                left ++;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                right --;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行用时：294 ms, 在所有 Java 提交中击败了5.03% 的用户<br>内存消耗：38.8 MB, 在所有 Java 提交中击败了32.46% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] numbers, <span class="hljs-keyword">int</span> target) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;numbers.length; i++)&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j =i+<span class="hljs-number">1</span>; j&lt;numbers.length; j++)&#123;<br>                    <span class="hljs-keyword">if</span> (target - numbers[i] == numbers[j])&#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;i+<span class="hljs-number">1</span>,j+<span class="hljs-number">1</span>&#125;;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>map<br>执行用时：2 ms, 在所有 Java 提交中击败了33.04% 的用户<br>内存消耗：38.7 MB, 在所有 Java 提交中击败了38.82% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] numbers, <span class="hljs-keyword">int</span> target) &#123;<br>        Map&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;(numbers.length);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numbers.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (map.get(target - numbers[i])!=<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;map.get(target-numbers[i])+<span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>&#125;;<br>            &#125;<br>            map.put(numbers[i],i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>144. 二叉树的前序遍历</title>
    <link href="/2021/06/17/leetcode/BinaryTreePre/"/>
    <url>/2021/06/17/leetcode/BinaryTreePre/</url>
    
    <content type="html"><![CDATA[<p>如果先执行移动根节点指向右子树，再执行pop执行会慢4ms</p><p>题目链接：<a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">https://leetcode-cn.com/problems/binary-tree-preorder-traversal/</a><br>执行用时：0 ms, 在所有 C++ 提交中击败了100.00% 的用户<br>内存消耗：8.2 MB, 在所有 C++ 提交中击败了54.13% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode *root)</span> </span>&#123;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        stack&lt;TreeNode*&gt; S;<br>        <span class="hljs-keyword">while</span> (root || !S.<span class="hljs-built_in">empty</span>())&#123;<br>            <span class="hljs-keyword">while</span> (root)&#123;<br>                S.<span class="hljs-built_in">push</span>(root);<br>                res.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>                root = root-&gt;left;<br>            &#125;<br>            root = S.<span class="hljs-built_in">top</span>();<br>            S.<span class="hljs-built_in">pop</span>();<br>            root = root -&gt;right;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00% 的用户<br>内存消耗：8.1 MB, 在所有 C++ 提交中击败了70.94% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">preorder</span><span class="hljs-params">(TreeNode *root, vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;res)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        res.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>        <span class="hljs-built_in">preorder</span>(root-&gt;left,res);<br>        <span class="hljs-built_in">preorder</span>(root-&gt;right,res);<br>    &#125;<br>    <br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode *root)</span> </span>&#123;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        <span class="hljs-built_in">preorder</span>(root,res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：36.8 MB, 在所有 Java 提交中击败了36.11% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preorder</span><span class="hljs-params">(Main.TreeNode root, List&lt;Integer&gt; res)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        res.add(root.val );<br>        preorder(root.left,res);<br>        preorder(root.right,res);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(Main.TreeNode root)</span> </span>&#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>        preorder(root,res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>二叉树</tag>
      
      <tag>递归</tag>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>561. 数组拆分 I</title>
    <link href="/2021/06/16/leetcode/ArrayPartition/"/>
    <url>/2021/06/16/leetcode/ArrayPartition/</url>
    
    <content type="html"><![CDATA[<p>双指针的写法<br>执行用时：60 ms, 在所有 C++ 提交中击败了60.86% 的用户<br>内存消耗：27.5 MB, 在所有 C++ 提交中击败了86.11% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">arrayPairSum</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> slow=<span class="hljs-number">0</span>,fast = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">while</span> (fast&lt;n)&#123;<br>            <span class="hljs-keyword">if</span> (nums[fast] &gt;= nums[slow]) &#123;<br>                sum+= <span class="hljs-built_in">min</span>(nums[slow],nums[fast]);<br>                slow = fast+<span class="hljs-number">1</span>;<br>                fast +=<span class="hljs-number">2</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                fast++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>排序后奇数下标的值都为较小值，求和即刻<br>执行用时：52 ms, 在所有 C++ 提交中击败了92.09% 的用户<br>内存消耗：27.6 MB, 在所有 C++ 提交中击败了20.27% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">arrayPairSum</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> slow=<span class="hljs-number">0</span>,fast = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;sum+=nums[i];&#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>344. 反转字符串</title>
    <link href="/2021/06/15/leetcode/reverseStr/"/>
    <url>/2021/06/15/leetcode/reverseStr/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/reverse-string/">https://leetcode-cn.com/problems/reverse-string/</a><br>执行用时：12 ms, 在所有 C++ 提交中击败了99.55% 的用户<br>内存消耗：22.7 MB, 在所有 C++ 提交中击败了5.09% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reverseString</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">char</span>&gt;&amp; s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> left =<span class="hljs-number">0</span>, right = s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">char</span> t;<br>        <span class="hljs-keyword">while</span> (left&lt;right)&#123;<br>            t=s[left];<br>            s[left] = s[right];<br>            s[right]=t;<br>            left++;<br>            right--;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>执行用时：1 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：45.1 MB, 在所有 Java 提交中击败了58.14% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reverseString</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] s)</span> </span>&#123;<br>           <span class="hljs-keyword">int</span> left =<span class="hljs-number">0</span>, right = s.length-<span class="hljs-number">1</span>;<br>           <span class="hljs-keyword">char</span> t;<br>           <span class="hljs-keyword">while</span> (left &lt; right)&#123;<br>               t = s[left];<br>               s[left] = s[right];<br>               s[right] = t;<br>               left++;<br>               right--;<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>双指针</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>219. 存在重复元素 II</title>
    <link href="/2021/06/14/leetcode/containDuplicate/"/>
    <url>/2021/06/14/leetcode/containDuplicate/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/contains-duplicate-ii/">https://leetcode-cn.com/problems/contains-duplicate-ii/</a><br>执行用时：28 ms, 在所有 C++ 提交中击败了86.81% 的用户<br>内存消耗：15.9 MB, 在所有 C++ 提交中击败了72.51% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">containsNearbyDuplicate</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        unordered_set&lt;<span class="hljs-keyword">int</span>&gt; s;<br>        <span class="hljs-keyword">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> cur = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            cur = nums[i];<br>            <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">find</span>(cur) == s.<span class="hljs-built_in">end</span>()) &#123;<br>                s.<span class="hljs-built_in">insert</span>(cur);<br>                <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">size</span>() &gt; k) &#123; <span class="hljs-comment">//一旦超过k的长度就去掉前面k距离前的值</span><br>                    s.<span class="hljs-built_in">erase</span>(nums[i - k]);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//再次找到nums[i]说明小于距离k</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>执行用时：10 ms, 在所有 Java 提交中击败了58.33% 的用户<br>内存消耗：41.7 MB, 在所有 Java 提交中击败了68.78% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsNearbyDuplicate</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (set.contains(nums[i])) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>            set.add(nums[i]);<br>            <span class="hljs-keyword">if</span> (set.size() &gt; k) &#123;<br>                set.remove(nums[i - k]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>set</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>28. 实现 strStr()</title>
    <link href="/2021/06/12/leetcode/kmp/"/>
    <url>/2021/06/12/leetcode/kmp/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">strStr</span><span class="hljs-params">(string haystack, string needle)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> m = haystack.<span class="hljs-built_in">size</span>(), i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> n = needle.<span class="hljs-built_in">size</span>(), j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (needle.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(haystack.<span class="hljs-built_in">empty</span>()|| m&lt;n)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">size_t</span> length = needle.<span class="hljs-built_in">size</span>(), fast = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> *next = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length];<br>        <span class="hljs-keyword">int</span> slow = next[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span> (fast &lt; length<span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((<span class="hljs-number">0</span> &gt; slow || needle[fast] == needle[slow])) &#123;<br>                fast++;<br>                slow++;<br>                next[fast] = slow;<br>                <span class="hljs-comment">//next[fast] = (needle[fast] != needle[slow] ? slow : next[slow]);</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                slow = next[slow];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (j &lt; n &amp;&amp; i &lt; m) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &gt; j || haystack[i] == needle[j]) &#123;<br>                i++;<br>                j++;<br>                <span class="hljs-keyword">if</span>(needle[j]==<span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>                    flag = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<span class="hljs-comment">//已经找到末尾</span><br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                j = next[j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">delete</span>[] next;<br>        <span class="hljs-keyword">if</span> (flag) <span class="hljs-keyword">return</span> i-j;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//KMP 主算法参考代码：</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">match</span> <span class="hljs-params">(<span class="hljs-keyword">char</span>* P, <span class="hljs-keyword">char</span>* S)</span></span>&#123; <span class="hljs-comment">// KMP 算法</span><br>    <span class="hljs-keyword">int</span>* next = <span class="hljs-built_in">buildNext</span>(P); <span class="hljs-comment">// 构造 next 表</span><br>    <span class="hljs-keyword">int</span> m = (<span class="hljs-keyword">int</span>) <span class="hljs-built_in">strlen</span> (S), i = <span class="hljs-number">0</span>; <span class="hljs-comment">// 文本串指针</span><br>    <span class="hljs-keyword">int</span> n = (<span class="hljs-keyword">int</span>) <span class="hljs-built_in">strlen</span>(P), j = <span class="hljs-number">0</span>; <span class="hljs-comment">//模式串指针</span><br>    <span class="hljs-keyword">while</span> (j &lt; n &amp;&amp; i &lt; m) <span class="hljs-comment">// 自左向右逐个比对字符</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &gt; j || S[i] == P[j]) <span class="hljs-comment">// 若匹配，或 P 已移除最左侧</span><br>            &#123;i++; j++;&#125; <span class="hljs-comment">// 则转到下一字符</span><br>        <span class="hljs-keyword">else</span><br>            j = next[j]; <span class="hljs-comment">// 模式串右移（注意：文本串不用回退）</span><br>    <span class="hljs-keyword">delete</span> [] next; <span class="hljs-comment">// 释放 next 表</span><br>    <span class="hljs-keyword">return</span> i - j;<br>&#125;<br><span class="hljs-comment">//构造 next 表参考代码：</span><br><span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">buildNext</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* P)</span> </span>&#123; <span class="hljs-comment">// 构造模式串 P 的 next 表</span><br>    <span class="hljs-keyword">size_t</span> m = <span class="hljs-built_in">strlen</span>(P), j = <span class="hljs-number">0</span>; <span class="hljs-comment">// “主”串指针</span><br>    <span class="hljs-keyword">int</span>* N = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m]; <span class="hljs-comment">// next 表</span><br>    <span class="hljs-keyword">int</span>  t = N[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 模式串指针</span><br>    <span class="hljs-keyword">while</span> (j &lt; m - <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> ( <span class="hljs-number">0</span> &gt; t || P[j] == P[t])&#123; <span class="hljs-comment">// 匹配</span><br>            j++; t++;<br>            N[j] = t; <span class="hljs-comment">// 此句可改进为 N[j] = (P[j] != P[t] ? t : N[t]);</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-comment">// 失配</span><br>        t = N[t];<br>    <span class="hljs-keyword">return</span> N;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>KMP</tag>
      
      <tag>字符串匹配</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 58 - I. 翻转单词顺序</title>
    <link href="/2021/06/10/leetcode/revers1/"/>
    <url>/2021/06/10/leetcode/revers1/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/">https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/</a></p><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00% 的用户<br>内存消耗：7.1 MB, 在所有 C++ 提交中击败了47.16% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">reverseWords</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,start;<br>        <span class="hljs-keyword">while</span> (s[i]==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>            start++;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">int</span> n =s.<span class="hljs-built_in">size</span>();<br>        string res=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">int</span> right = n<span class="hljs-number">-1</span>,left = right;<br>        <span class="hljs-keyword">while</span> (left&gt;=start)&#123;<br>            <span class="hljs-keyword">if</span> (s[right]==<span class="hljs-number">32</span>&amp;&amp;right&gt;<span class="hljs-number">0</span>)&#123;<br>                right--;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            left = right;<br>            <span class="hljs-keyword">while</span> (s[left]!=<span class="hljs-number">32</span>&amp;&amp;left&gt;<span class="hljs-number">0</span>)&#123;<br>                left--;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (left==start)&#123;left--;&#125;;<br>            <span class="hljs-keyword">for</span> (i = left+<span class="hljs-number">1</span>; i &lt;= right; ++i) &#123;<br>                res+=s[i];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (left&gt;start)&#123;res+=<span class="hljs-string">&#x27; &#x27;</span>;&#125;<br>            right = left;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>48. 旋转图像</title>
    <link href="/2021/06/10/leetcode/rotateMatrix/"/>
    <url>/2021/06/10/leetcode/rotateMatrix/</url>
    
    <content type="html"><![CDATA[<p>题目地址：<a href="https://leetcode-cn.com/problems/rotate-image/">https://leetcode-cn.com/problems/rotate-image/</a><br>执行用时：8 ms, 在所有 C++ 提交中击败了42.94% 的用户<br>内存消耗：6.8 MB, 在所有 C++ 提交中击败了90.84% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> N = matrix.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> i,j;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i&lt; N; i++ )&#123; <span class="hljs-comment">//矩阵转置</span><br>            <span class="hljs-keyword">for</span>(j = i+<span class="hljs-number">1</span>; j&lt;N; j++)&#123;<br>                <span class="hljs-built_in">swap</span>(matrix[i][j],matrix[j][i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i&lt; N; i++ )&#123; <span class="hljs-comment">//水平翻转</span><br>               <span class="hljs-built_in">reverse</span>(matrix[i].<span class="hljs-built_in">begin</span>(),matrix[i].<span class="hljs-built_in">end</span>());<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>矩阵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5. 最长回文子串</title>
    <link href="/2021/06/09/leetcode/longest/"/>
    <url>/2021/06/09/leetcode/longest/</url>
    
    <content type="html"><![CDATA[<p>题目地址：<a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">https://leetcode-cn.com/problems/longest-palindromic-substring/</a><br>执行用时：304 ms, 在所有 C++ 提交中击败了51.32% 的用户<br>内存消耗：7 MB, 在所有 C++ 提交中击败了83.19% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> length = s.<span class="hljs-built_in">length</span>();<br>        string maxs = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">empty</span>()||s.<span class="hljs-built_in">size</span>()&lt;<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">return</span> s;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> end,left,right,i;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; length; ++i) &#123;<br>                end = length - <span class="hljs-number">1</span>;<br>                right = end;<br>                left = i;<br>                <span class="hljs-keyword">while</span> (right &gt; left)&#123;<br>                    <span class="hljs-keyword">if</span> (s[right] == s[left])&#123;<br>                        --right;<br>                        ++left;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        end--;<br>                        right = end;<br>                        left = i;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> ((end-i+<span class="hljs-number">1</span>) &gt; maxs.<span class="hljs-built_in">size</span>())&#123;<br>                    maxs = s.<span class="hljs-built_in">substr</span>(i,end-i+<span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxs;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>回文字符串</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14.最长公共前缀</title>
    <link href="/2021/06/08/leetcode/Longest%20Common%20Prefix/"/>
    <url>/2021/06/08/leetcode/Longest%20Common%20Prefix/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/longest-common-prefix/">https://leetcode-cn.com/problems/longest-common-prefix/</a></p><p>执行用时：4 ms, 在所有 C++ 提交中击败了89.08% 的用户<br>内存消耗：8.7 MB, 在所有 C++ 提交中击败了96.19% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestCommonPrefix</span><span class="hljs-params">(vector&lt;string&gt; &amp;strs)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> n=strs.<span class="hljs-built_in">size</span>();<br>        string sub = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (strs[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) &#123; <span class="hljs-keyword">return</span> sub; &#125;<br>        <span class="hljs-keyword">if</span>(n&gt;<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">while</span> (strs[<span class="hljs-number">0</span>][j] == strs[i][j] &amp;&amp; (strs[i][j] != <span class="hljs-string">&#x27;\0&#x27;</span>)) &#123;<br>                <span class="hljs-keyword">if</span> (i == n- <span class="hljs-number">1</span>) &#123;<br>                    sub += strs[<span class="hljs-number">0</span>][j];<br>                    j++;<br>                    i = <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">return</span> sub;<br>        &#125;<br>        <span class="hljs-keyword">return</span> strs[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
      <category>[object Object]</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>498. Diagonal Traverse</title>
    <link href="/2021/06/06/leetcode/Diagonal%20Traverse/"/>
    <url>/2021/06/06/leetcode/Diagonal%20Traverse/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/diagonal-traverse/">https://leetcode-cn.com/problems/diagonal-traverse/</a><br>执行用时：28 ms, 在所有 C++ 提交中击败了79.11% 的用户<br>内存消耗：18 MB, 在所有 C++ 提交中击败了17.22% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">findDiagonalOrder</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; mat)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> row = mat.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> col = mat[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; mid;<br>        <span class="hljs-keyword">if</span>(mat.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span> mid;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;row+col<span class="hljs-number">-1</span>; ++i) &#123;<br>            mid.<span class="hljs-built_in">clear</span>();<br>            <span class="hljs-keyword">int</span> r = i&lt;col?<span class="hljs-number">0</span>:i-col+<span class="hljs-number">1</span>; <span class="hljs-comment">// 行遍历完到下一列</span><br>            <span class="hljs-keyword">int</span> c = i&lt;col?i:col<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">while</span> (r&lt; row &amp;&amp; c&gt;<span class="hljs-number">-1</span>) &#123;<br>                mid.<span class="hljs-built_in">push_back</span>(mat[r][c]);<br>                ++r; <span class="hljs-comment">// 下一行</span><br>                --c; <span class="hljs-comment">// 左边的列</span><br>            &#125;<br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//需要翻转的对角线</span><br>                <span class="hljs-built_in">reverse</span>(mid.<span class="hljs-built_in">begin</span>(), mid.<span class="hljs-built_in">end</span>());<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; mid.<span class="hljs-built_in">size</span>(); i++) &#123;<br>                res.<span class="hljs-built_in">push_back</span>(mid[i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>vector</tag>
      
      <tag>矩阵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题 01.08. 零矩阵</title>
    <link href="/2021/06/05/leetcode/setZeroes/"/>
    <url>/2021/06/05/leetcode/setZeroes/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/zero-matrix-lcci/">https://leetcode-cn.com/problems/zero-matrix-lcci/</a><br>暴力循环法<br>执行用时：12 ms, 在所有 C++ 提交中击败了88.06% 的用户<br>内存消耗：11.9 MB, 在所有 C++ 提交中击败了45.29% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setZeroes</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> row = matrix.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> col = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> index[row][col];<br>        <span class="hljs-built_in">memset</span>(&amp;index[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(index)); <br>        <span class="hljs-keyword">int</span> i,j;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;row; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;col; ++j)&#123;<br>                <span class="hljs-keyword">if</span>(matrix[i][j] == <span class="hljs-number">0</span>)&#123;<br>                    index[i][j] = <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;row; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;col; ++j)&#123;<br>                <span class="hljs-keyword">if</span>(index[i][j])&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>; k&lt;col; ++k)&#123;<br>                        matrix[i][k] = <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;row; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;col; ++j)&#123;<br>                <span class="hljs-keyword">if</span>(index[i][j])&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>; k&lt;row; ++k)&#123;<br>                        matrix[k][j] = <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//另一种简化版</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setZeroes</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> rowLength = matrix.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> colLength = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; row;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; col;<br>        <span class="hljs-keyword">int</span> i,j;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;rowLength; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;colLength; ++j)&#123;<br>                <span class="hljs-keyword">if</span>(matrix[i][j] == <span class="hljs-number">0</span>)&#123;<br>                    row.<span class="hljs-built_in">push_back</span>(i);<br>                    col.<span class="hljs-built_in">push_back</span>(j);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;rowLength; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;colLength; ++j)&#123;<br>                matrix[row[i]][j] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;colLength; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;colLength; ++j)&#123;<br>               matrix[j][col[i]] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>矩阵</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>56. 合并区间</title>
    <link href="/2021/05/26/leetcode/merge/"/>
    <url>/2021/05/26/leetcode/merge/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">merge</span>(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; &amp;intervals) &#123;<br>        <span class="hljs-keyword">int</span> length = intervals.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>;<br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; res;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; val;<br>        <span class="hljs-keyword">if</span> (length == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> intervals;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">sort</span>(intervals.<span class="hljs-built_in">begin</span>(), intervals.<span class="hljs-built_in">end</span>());<br>            res.<span class="hljs-built_in">push_back</span>(intervals[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = start + <span class="hljs-number">1</span>; i &lt; length; ++i) &#123;<br>                <span class="hljs-keyword">if</span> (res[start][<span class="hljs-number">1</span>] &gt;= intervals[i][<span class="hljs-number">0</span>]) &#123;<br>                    res[start][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(res[start][<span class="hljs-number">1</span>], intervals[i][<span class="hljs-number">1</span>]);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    res.<span class="hljs-built_in">push_back</span>(intervals[i]);<br>                    start++;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
      <category>[object Object]</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>vector</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 22. 链表中倒数第k个节点</title>
    <link href="/2021/05/21/leetcode/k/"/>
    <url>/2021/05/21/leetcode/k/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">getKthFromEnd</span><span class="hljs-params">(ListNode* head, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-comment">//初始化指向表头</span><br>        ListNode *pre=head, *last=head;<br>        <span class="hljs-comment">//先往后走</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>; i&lt;=k; i++)&#123;<br>            last = last-&gt;next;<br>        &#125;<br>        <span class="hljs-comment">//同时移动指针</span><br>        <span class="hljs-keyword">while</span>(last != <span class="hljs-literal">NULL</span>)&#123;<br>            pre = pre-&gt;next;<br>            last = last-&gt;next;<br>        &#125;<br>        <span class="hljs-comment">//返回前一个指针</span><br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00% 的用户<br>内存消耗：10.3 MB, 在所有 C++ 提交中击败了57.96% 的用户</p>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>双指针</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>206. 反转链表 C++</title>
    <link href="/2021/05/18/leetcode/reverseList/"/>
    <url>/2021/05/18/leetcode/reverseList/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/reverse-linked-list/">https://leetcode-cn.com/problems/reverse-linked-list/</a><br>执行用时：4 ms, 在所有 C++ 提交中击败了96.52% 的用户<br>内存消耗：8 MB, 在所有 C++ 提交中击败了91.52% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++">**<br> * Definition <span class="hljs-keyword">for</span> singly-linked list.<br> * <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> &#123;</span><br> *     <span class="hljs-keyword">int</span> val;<br> *     ListNode *next;<br> *     <span class="hljs-built_in">ListNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br> *     <span class="hljs-built_in">ListNode</span>(<span class="hljs-keyword">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br> *     <span class="hljs-built_in">ListNode</span>(<span class="hljs-keyword">int</span> x, ListNode *next) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(next) &#123;&#125;<br> * &#125;;<br> */<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode *pre = <span class="hljs-literal">NULL</span>;<br>        ListNode *cur = head;<br>        ListNode *next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">NULL</span>)&#123;<br>            next = cur-&gt;next;<br>            cur-&gt;next = pre;<br>            pre = cur;<br>            cur= next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>执行用时：12 ms, 在所有 Swift 提交中击败了96.71%的用户<br>内存消耗：14.6 MB, 在所有 Swift 提交中击败了29.72%的用户</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>1，添加一个空的头节点A，相当于头插法的入口<br>2，设置一个实际的lasthead指针，表示上一次链表的头节点<br>3，头节点A每次指向当前cur访问节点的下一个节点<br>4，然后cur就可以跳过这个被A选中的节点，指向下一个，直到最后cur指向空<br>5，修改被选中的节点的next指针，使它指向旧的头节点<br>6，将lasthead向前移动，指向被A选中的节点，也就是新插入的节点<br>7，最后返回链表的实际起点lasthead</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     public var val: Int</span><br><span class="hljs-comment"> *     public var next: ListNode?</span><br><span class="hljs-comment"> *     public init() &#123; self.val = 0; self.next = nil; &#125;</span><br><span class="hljs-comment"> *     public init(_ val: Int) &#123; self.val = val; self.next = nil; &#125;</span><br><span class="hljs-comment"> *     public init(_ val: Int, _ next: ListNode?) &#123; self.val = val; self.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseList</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?)</span> -&gt; <span class="hljs-type">ListNode</span>? &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-type">A</span> <span class="hljs-operator">=</span> <span class="hljs-type">ListNode</span>(<span class="hljs-number">0</span>,head)<br>        <span class="hljs-keyword">var</span> cur <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">var</span> lastHead <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">while</span> cur<span class="hljs-operator">?</span>.next <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-type">A</span>.next <span class="hljs-operator">=</span> cur<span class="hljs-operator">?</span>.next<br>            cur<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> cur<span class="hljs-operator">?</span>.next<span class="hljs-operator">?</span>.next<br>            <span class="hljs-type">A</span>.next<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> lastHead<br>            lastHead <span class="hljs-operator">=</span> <span class="hljs-type">A</span>.next<br>        &#125;<br>        <span class="hljs-keyword">return</span> lastHead<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>反转链表</tag>
      
      <tag>三指针</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1012 数字分类</title>
    <link href="/2021/05/15/patB/basic-1012/"/>
    <url>/2021/05/15/patB/basic-1012/</url>
    
    <content type="html"><![CDATA[<p>题目链接： <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805311146147840">https://pintia.cn/problem-sets/994805260223102976/problems/994805311146147840</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a1 = <span class="hljs-number">0</span>, a2 = <span class="hljs-number">0</span>, a3 = <span class="hljs-number">0</span>, a4 = <span class="hljs-number">0</span>, a5 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">float</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> N;<br>    <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>,x=<span class="hljs-number">1</span>;<br>    cin &gt;&gt; N;<br>    <span class="hljs-keyword">int</span> arr[N];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i) &#123;<br>        cin &gt;&gt; arr[i];<br>        <span class="hljs-keyword">if</span> (arr[i] % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>) &#123;<br>            a1 += arr[i];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i] % <span class="hljs-number">5</span> == <span class="hljs-number">1</span>) &#123;<br>            flag = <span class="hljs-number">1</span>;<br>            a2 += x * arr[i];<br>            x = -x;;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i] % <span class="hljs-number">5</span> == <span class="hljs-number">2</span>) &#123;<br>            a3++;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i] % <span class="hljs-number">5</span> == <span class="hljs-number">3</span>) &#123;<br>            a4++;<br>            sum += arr[i];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i] % <span class="hljs-number">5</span> == <span class="hljs-number">4</span>) &#123; <span class="hljs-keyword">if</span> (arr[i] &gt;= a5) a5 = arr[i]; &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a1 == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N &quot;</span>); <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a1);<br>    <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N &quot;</span>); <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a2);<br>    <span class="hljs-keyword">if</span>(a3 == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N &quot;</span>); <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a3);<br>    <span class="hljs-keyword">if</span>(a4 == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N &quot;</span>); <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.1f &quot;</span>, sum/a4*<span class="hljs-number">1.0</span>);<br>    <span class="hljs-keyword">if</span>(a5 == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N&quot;</span>);  <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a5);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>35. 搜索插入位置</title>
    <link href="/2021/05/13/leetcode/search-insert/"/>
    <url>/2021/05/13/leetcode/search-insert/</url>
    
    <content type="html"><![CDATA[<p>题目链接 <a href="https://leetcode-cn.com/problems/search-insert-position/">https://leetcode-cn.com/problems/search-insert-position/</a><br>除了二分法外，还可以遍历全部，找不到即输出数组长度的值，也就是插入未知的下标。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> right = nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; <span class="hljs-comment">//注意边界</span><br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> mid;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            mid = left + (right - left) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (target &gt; nums[mid] ) &#123; <br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>二分法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>724. 寻找数组的中心下标 C++</title>
    <link href="/2021/05/12/leetcode/findArrayIndexC/"/>
    <url>/2021/05/12/leetcode/findArrayIndexC/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pivotIndex</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> leftSum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> val:nums) sum += val;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            <span class="hljs-keyword">if</span> (leftSum == sum - nums[i] - leftSum) &#123; <span class="hljs-comment">//左边之和等于右边之和，当下i为中间下标</span><br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>            leftSum += nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>hhh，执行结果不稳定，有时候挺好的。<br>执行用时：20 ms, 在所有 C++ 提交中击败了93.14% 的用户<br>内存消耗：30.2 MB, 在所有 C++ 提交中击败了77.02% 的用户</p>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过js web3访问以太坊钱包查询余额</title>
    <link href="/2021/05/11/block/getBalance/"/>
    <url>/2021/05/11/block/getBalance/</url>
    
    <content type="html"><![CDATA[<p>看了奇客谷上面的教程在Web3处遇到错误，不太了解js就搜了下别的方法，<br>安装好npm , node 和npm install web3后（百度即可），运行下面的代码可以查询到余额</p><p><img src="/img/getBalance.jpg" alt="图片"><br>价格约 💲14,357,735.16 (@$3,968.73/ETH)<br>时间: 2021/5/11/20:25</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> Web3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;web3&#x27;</span>)<br><span class="hljs-keyword">const</span> web3 = <span class="hljs-keyword">new</span> Web3(<span class="hljs-keyword">new</span> Web3.providers.HttpProvider(<span class="hljs-string">&quot;https://mainnet.infura.io/v3/YOUR_PROJECT_ID&quot;</span>)); <br><span class="hljs-keyword">const</span> address = <span class="hljs-string">&#x27;0xb5d85CBf7cB3EE0D56b3bB207D5Fc4B82f43F511&#x27;</span> <span class="hljs-comment">// 账户地址</span><br><span class="hljs-comment">// 读取address中的余额，余额单位是wei</span><br>web3.eth.getBalance(address, <span class="hljs-function">(<span class="hljs-params">err, wei</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 余额单位从wei转换为ether</span><br>    balance = web3.utils.fromWei(wei, <span class="hljs-string">&#x27;ether&#x27;</span>)<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;balance:&quot;</span> +balance)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>interesting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ETH</tag>
      
      <tag>JavaScript</tag>
      
      <tag>web3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1008 数组元素循环右移问题</title>
    <link href="/2021/05/10/patB/basic-1008/"/>
    <url>/2021/05/10/patB/basic-1008/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> N = in.nextInt();<br>        <span class="hljs-keyword">int</span> M = in.nextInt();<br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">100</span>];<br>        M = M % N;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            arr[i] = in.nextInt();<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = N - M; i &lt;= N - <span class="hljs-number">1</span>; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N - M - <span class="hljs-number">1</span>; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.print(arr[N - M - <span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>包装类，拆箱装箱</title>
    <link href="/2021/05/09/Learn/%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    <url>/2021/05/09/Learn/%E5%8C%85%E8%A3%85%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">boxing</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 装箱: 把基本数据类型转换成包装类</span><br>        <span class="hljs-comment">// 1. 自动装箱</span><br>        <span class="hljs-keyword">int</span> t1 = <span class="hljs-number">2</span>;<br>        Integer t2 = t1;<br>        <span class="hljs-comment">// 2. 手动装箱</span><br>        Integer t3 = <span class="hljs-keyword">new</span> Integer(t1);<br>        <span class="hljs-comment">// 测试</span><br>        System.out.println(<span class="hljs-string">&quot;int 类型变量t1=&quot;</span> + t1);<br>        System.out.println(<span class="hljs-string">&quot;Integer 类型变量t2=&quot;</span> + t2);<br>        System.out.println(<span class="hljs-string">&quot;Integer 类型变量t1=&quot;</span> + t3);<br>        System.out.println(<span class="hljs-string">&quot;****************&quot;</span>);<br>        <span class="hljs-comment">// 拆箱: 把包装类转换成基本数据类型</span><br>        <span class="hljs-comment">// 1. 自动拆箱</span><br>        <span class="hljs-keyword">int</span> t4 = t2;<br>        <span class="hljs-comment">// 2. 手动拆箱</span><br>        <span class="hljs-keyword">int</span> t5 = t2.intValue();<br>        <span class="hljs-comment">// 测试</span><br>        System.out.println(<span class="hljs-string">&quot;Integer 类型对象t4=&quot;</span> + t4);<br>        System.out.println(<span class="hljs-string">&quot;Integer 类型对象t5=&quot;</span> + t5);<br>        <span class="hljs-keyword">double</span> t6 = t2.doubleValue();<br>        System.out.println(<span class="hljs-string">&quot;手动拆箱后: &quot;</span> + t6);<br><br>        <span class="hljs-comment">// 定义int类型变量，值为100</span><br>        <span class="hljs-keyword">int</span> score = <span class="hljs-number">100</span>;<br>        <span class="hljs-comment">// 创建Integer包装类对象，表示变量score1的值</span><br>        Integer score1 = score;<br>        <span class="hljs-comment">// 将Integer包装类转换为double类型</span><br>        <span class="hljs-keyword">double</span> score2 = score1;<br>        <span class="hljs-comment">// 将Integer包装类转换为long类型</span><br>        <span class="hljs-keyword">long</span> score3 = score1;<br>        <span class="hljs-comment">// 将Integer包装类转换为int类型</span><br>        <span class="hljs-keyword">int</span> score4 = score1.intValue();<br>        <span class="hljs-comment">// 打印输出</span><br>        System.out.println(<span class="hljs-string">&quot;score对应的Integer类型结果为: &quot;</span> + score1);<br>        System.out.println(<span class="hljs-string">&quot;score对应的double类型结果为: &quot;</span> + score2);<br>        System.out.println(<span class="hljs-string">&quot;score对应的long类型结果为: &quot;</span> + score3);<br>        System.out.println(<span class="hljs-string">&quot;重新由Integer转换为int类型的结果为: &quot;</span> + score4);<br><br><br>        <span class="hljs-comment">// 基本数据类型转换为字符串</span><br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">1</span>;<br>        String s = Integer.toString(num);<br>        System.out.println(<span class="hljs-string">&quot;int类型转换为String类型s= &quot;</span> + s);<br>        <span class="hljs-comment">// 字符串转换为基本数据类型</span><br>        <span class="hljs-comment">// 1. 包装类的parse</span><br>        <span class="hljs-keyword">int</span> num1 = Integer.parseInt(s);<br>        <span class="hljs-comment">// 2. 包装类的valueOf 先将字符串转换为包装类, 再通过自动拆箱完成基本数据转换</span><br>        <span class="hljs-keyword">int</span> num2 = Integer.valueOf(s);<br>        System.out.println(<span class="hljs-string">&quot;String类型转换为int类型num1= &quot;</span> + num1);<br>        System.out.println(<span class="hljs-string">&quot;String类型转换为int类型num2= &quot;</span> + num2);<br>        <span class="hljs-keyword">double</span> a = <span class="hljs-number">12.5</span>;<br>        <span class="hljs-comment">// 将基本类型转换为字符串</span><br>        String str1 = Double.toString(a) + <span class="hljs-number">10</span>;<br>        System.out.println(<span class="hljs-string">&quot;a 转换为String型后+10的结果为： &quot;</span> + str1);<br>        String str = <span class="hljs-string">&quot;2.8&quot;</span>;<br>        <span class="hljs-comment">// 将字符串转换为基本类型</span><br>        <span class="hljs-keyword">double</span> b = <span class="hljs-keyword">new</span> Double(str) + <span class="hljs-number">10</span>;<br>        System.out.println(<span class="hljs-string">&quot;str 转换为double型后+10的结果为： &quot;</span> + b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1074 Reversing Linked List</title>
    <link href="/2021/05/08/patA/1074/"/>
    <url>/2021/05/08/patA/1074/</url>
    
    <content type="html"><![CDATA[<p>题目链接 <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805394512134144">https://pintia.cn/problem-sets/994805342720868352/problems/994805394512134144</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> first, k, n, sum = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; first &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">int</span> temp, data[<span class="hljs-number">100005</span>], next[<span class="hljs-number">100005</span>], list[<span class="hljs-number">100005</span>], result[<span class="hljs-number">100005</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; temp;<br>        cin &gt;&gt; data[temp] &gt;&gt; next[temp];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (first != <span class="hljs-number">-1</span>) &#123;<br>        list[sum++] = first;<br>        first = next[first];<br>    &#125;<br>    <span class="hljs-comment">//result[100] r[12309] r[33218] r[00000] r[99999] r[68237]</span><br>    <span class="hljs-comment">//1-2-3-4-5-6-7-8</span><br>    <span class="hljs-comment">//3-2-1-6-5-4-7-8</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; sum; i++) result[i] = list[i];<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, i, index = k;<br>    <span class="hljs-keyword">int</span> cnt = sum / k;<br>    <span class="hljs-keyword">while</span> (cnt--) &#123; <span class="hljs-comment">// 循环实现更好理解，下面的公式还不会</span><br>        <span class="hljs-keyword">for</span> (i = left; i &lt; k + left; ++i) &#123;<br>            result[i] = list[--index];<br>        &#125;<br>        left = i;<br>        index = k + left;<br>    &#125;<br><br><span class="hljs-comment">/*liuchuo.net</span><br><span class="hljs-comment">*    for (int i = 0; i &lt; (sum - sum % k); i++)</span><br><span class="hljs-comment">*       result[i] = list[i / k * k + k - 1 - i % k];</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; sum - <span class="hljs-number">1</span>; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d %d %05d\n&quot;</span>, result[i], data[result[i]], result[i + <span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d %d -1&quot;</span>, result[sum - <span class="hljs-number">1</span>], data[result[sum - <span class="hljs-number">1</span>]]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat甲级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>反转链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1051 Pop Sequence</title>
    <link href="/2021/05/08/patA/1051/"/>
    <url>/2021/05/08/patA/1051/</url>
    
    <content type="html"><![CDATA[<p>===<br>题目链接：<a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805427332562944">https://pintia.cn/problem-sets/994805342720868352/problems/994805427332562944</a><br>===</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> m,n,k;<br>    cin&gt;&gt;m&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; ++i) &#123;<br>        stack&lt;<span class="hljs-keyword">int</span> &gt;(s);<br>        <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">int</span> current = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>            s.<span class="hljs-built_in">push</span>(i);<br>            <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">size</span>() &gt; m) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">while</span> (!s.<span class="hljs-built_in">empty</span>() &amp;&amp; s.<span class="hljs-built_in">top</span>() == v[current]) &#123;<br>                s.<span class="hljs-built_in">pop</span>();<br>                current++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (current == n + <span class="hljs-number">1</span>) flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (flag) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat甲级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>堆栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1007 Maximum Subsequence Sum</title>
    <link href="/2021/05/08/patA/1007/"/>
    <url>/2021/05/08/patA/1007/</url>
    
    <content type="html"><![CDATA[<p>===<br>题目链接：<a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805514284679168">https://pintia.cn/problem-sets/994805342720868352/problems/994805514284679168</a><br>===</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Max 100001</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> N;<br>    <span class="hljs-keyword">int</span> A[Max],tempIndex=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;N);<br>    <span class="hljs-keyword">int</span> ThisSum, MaxSum,i;<br>    ThisSum = <span class="hljs-number">0</span>;<br>    MaxSum = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">int</span> left=<span class="hljs-number">0</span>,right=N<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; N; i++ ) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;A[i]);<br>        ThisSum += A[i];<br>        <span class="hljs-keyword">if</span>(ThisSum &lt; <span class="hljs-number">0</span>) &#123;<br>            ThisSum = <span class="hljs-number">0</span>;    <span class="hljs-comment">//变小则清0</span><br>            tempIndex = i+<span class="hljs-number">1</span>; <span class="hljs-comment">//移动边界</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ThisSum &gt; MaxSum) &#123;<br>            MaxSum = ThisSum;<br>            left = tempIndex; <br>            right = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (MaxSum&lt;<span class="hljs-number">0</span>) &#123;<br>        MaxSum = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,MaxSum, A[left], A[right]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat甲级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>在线处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1016 部分A+B</title>
    <link href="/2021/05/08/patB/basic-1016/"/>
    <url>/2021/05/08/patB/basic-1016/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a,da,b,db;<br>    <span class="hljs-keyword">int</span> pa=<span class="hljs-number">0</span>,pb=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>,&amp;a,&amp;da,&amp;b,&amp;db);<br>    <span class="hljs-keyword">while</span>(a)&#123;<br>        <span class="hljs-keyword">if</span>(a%<span class="hljs-number">10</span> == da)&#123;<br>            pa= pa*<span class="hljs-number">10</span>;<br>            pa+=da;<br>        &#125;<br>        a= a/<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(b)&#123;<br>        <span class="hljs-keyword">if</span>(b%<span class="hljs-number">10</span> == db)&#123;<br>            pb= pb*<span class="hljs-number">10</span>;<br>            pb+=db;<br>        &#125;<br>        b= b/<span class="hljs-number">10</span>;<br>    &#125;<br>    cout&lt;&lt;(pa+pb)&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1026 程序运行时间 (java)</title>
    <link href="/2021/05/08/patB/basic-1026(java)/"/>
    <url>/2021/05/08/patB/basic-1026(java)/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> C1, C2;<br>        C1 = in.nextInt();<br>        C2 = in.nextInt();<br>        <span class="hljs-keyword">int</span> tck = (C2 - C1 +<span class="hljs-number">50</span>)/<span class="hljs-number">100</span> ;<br>        <span class="hljs-keyword">int</span> hour, minute, second;<br>        hour = tck / <span class="hljs-number">3600</span>;<br>        minute = tck % <span class="hljs-number">3600</span> / <span class="hljs-number">60</span>;<br>        second = tck % <span class="hljs-number">60</span>;<br>        System.out.println(String.format(<span class="hljs-string">&quot;%02d:%02d:%02d&quot;</span>,hour,minute,second));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1026 程序运行时间</title>
    <link href="/2021/05/08/patB/basic-1026/"/>
    <url>/2021/05/08/patB/basic-1026/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CLK_TCK 100</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> c1,c2;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;c1,&amp;c2);<br>    <span class="hljs-keyword">int</span> second = (c2-c1+<span class="hljs-number">50</span>)*<span class="hljs-number">1.0</span>/CLK_TCK;<br>    <span class="hljs-keyword">int</span> hour = second/<span class="hljs-number">3600</span>;<br>    <span class="hljs-keyword">int</span> minute = (second%<span class="hljs-number">3600</span>)/<span class="hljs-number">60</span>;<br>    <span class="hljs-keyword">int</span> s = second-hour*<span class="hljs-number">3600</span>-minute*<span class="hljs-number">60</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%02d:%02d:%02d&quot;</span>,hour,minute,s);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1046 划拳 (java)</title>
    <link href="/2021/05/08/patB/basic-1046(java)/"/>
    <url>/2021/05/08/patB/basic-1046(java)/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> N;<br>        <span class="hljs-keyword">int</span> say1,do1,say2,do2;<br>        <span class="hljs-keyword">int</span> A = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> B = <span class="hljs-number">0</span>;<br>        N = in.nextInt();<br>        <span class="hljs-keyword">while</span>(N != <span class="hljs-number">0</span>) &#123;<br>            say1 = in.nextInt();<br>            do1 = in.nextInt();<br>            say2 = in.nextInt();<br>            do2 = in.nextInt();<br>            <span class="hljs-keyword">int</span> sum = say1 + say2;<br>            <span class="hljs-keyword">if</span>(sum == do1 &amp;&amp; sum != do2)&#123;<br>                B++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum == do2 &amp;&amp; sum != do1)&#123;<br>                A++;<br>            &#125;<br>            N--;<br>        &#125;<br>        System.out.println(A+<span class="hljs-string">&quot; &quot;</span>+B);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1046 划拳</title>
    <link href="/2021/05/08/patB/basic-1046/"/>
    <url>/2021/05/08/patB/basic-1046/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> A, a, B, b;<br>    <span class="hljs-keyword">int</span> sum1, sum2;<br>    <span class="hljs-keyword">int</span> N;<br>    cin &gt;&gt; N;<br>    <span class="hljs-keyword">while</span> (N--) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, &amp;A, &amp;a, &amp;B, &amp;b);<br>        <span class="hljs-keyword">if</span> ((A + B) == a &amp;&amp; (A + B) != b) &#123;<br>            sum1++;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((A + B) == b &amp;&amp; (A + B) != a) &#123;<br>            sum2++;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; sum2 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; sum1 &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1002 写出这个数</title>
    <link href="/2021/05/08/patB/basic-1002/"/>
    <url>/2021/05/08/patB/basic-1002/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string s;<br>    string pinyin[<span class="hljs-number">10</span>]=&#123;<span class="hljs-string">&quot;ling&quot;</span>,<span class="hljs-string">&quot;yi&quot;</span>,<span class="hljs-string">&quot;er&quot;</span>,<span class="hljs-string">&quot;san&quot;</span>,<span class="hljs-string">&quot;si&quot;</span>,<span class="hljs-string">&quot;wu&quot;</span>,<span class="hljs-string">&quot;liu&quot;</span>,<span class="hljs-string">&quot;qi&quot;</span>,<span class="hljs-string">&quot;ba&quot;</span>,<span class="hljs-string">&quot;jiu&quot;</span>&#125;;<br>    cin&gt;&gt;s;<br>    <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">length</span>(); ++i) &#123;<br>        sum+=(s[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    &#125;<br>    string num = <span class="hljs-built_in">to_string</span>(sum);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num.<span class="hljs-built_in">length</span>(); ++i) &#123;<br>        <span class="hljs-keyword">if</span>(i!=<span class="hljs-number">0</span>) cout&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        cout&lt;&lt;pinyin[num[i]-<span class="hljs-string">&#x27;0&#x27;</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1001 害死人不偿命的(3n+1)猜想</title>
    <link href="/2021/05/08/patB/basic-1001(3n+1)/"/>
    <url>/2021/05/08/patB/basic-1001(3n+1)/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">while</span>(n!=<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>            n /=<span class="hljs-number">2</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            n = (<span class="hljs-number">3</span>*n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>        &#125;<br>        count++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,count);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>678. 有效的括号字符串</title>
    <link href="/2021/05/08/leetcode/checkValidString/"/>
    <url>/2021/05/08/leetcode/checkValidString/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/***</span><br><span class="hljs-comment">看了题解下面的思路，非常便捷，原代码是三目表达式改写成if else了。</span><br><span class="hljs-comment">“有效的字符串，即从左向右看是有效的，从右向左看也是有效的</span><br><span class="hljs-comment">如果在遍历过程中，left或者right小于0，则是无效”</span><br><span class="hljs-comment">***/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">checkValidString</span><span class="hljs-params">(string s)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> right = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">length</span>(); ++i) &#123;<br>        <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;)&#x27;</span>)&#123;<br>            left--; <br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            left++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(s[s.<span class="hljs-built_in">length</span>()-i<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;(&#x27;</span>)&#123; <span class="hljs-comment">//i从0开始，但是长度是从1开始数，所以-1</span><br>            right--;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            right++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (left&lt;<span class="hljs-number">0</span> || right &lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>724. 寻找数组的中心下标</title>
    <link href="/2021/05/08/leetcode/findArrayIndex/"/>
    <url>/2021/05/08/leetcode/findArrayIndex/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pivotIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> leftSum =<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i:nums) &#123;<br>            sum+=i;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(leftSum == sum - leftSum-nums[i])&#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>            leftSum+=nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11. 盛最多水的容器</title>
    <link href="/2021/05/08/leetcode/ContainerWithMostWater/"/>
    <url>/2021/05/08/leetcode/ContainerWithMostWater/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//双指针法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] height)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> area = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = height.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            area = Math.min(height[left], height[right])*(right-left);<br>            ans = Math.max(area, ans);<br>            <span class="hljs-keyword">if</span>(height[left] &gt;= height[right]) &#123;<br>                right--;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                left++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//暴力法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Violence</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] height)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> max = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> area = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> wide = height.length;<br>        <span class="hljs-keyword">int</span> blow = wide -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(left=<span class="hljs-number">0</span>; left &lt; wide; left++) &#123;<br>            blow = wide- <span class="hljs-number">1</span> - left;<br>            <span class="hljs-keyword">for</span>(right = wide -<span class="hljs-number">1</span>; right&gt; left ; right --) &#123;<br>                <span class="hljs-keyword">if</span>(height[left] &lt;= height[right]) &#123;<br>                    area = height[left]*blow;<br>                    blow --;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    area = height[right]*blow;<br>                    blow --;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(area &gt;= max) &#123;<br>                    max = area;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. 两数之和(violence)</title>
    <link href="/2021/05/08/leetcode/twoSum/"/>
    <url>/2021/05/08/leetcode/twoSum/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Violence</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; nums.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (nums[j] == target - nums[i]) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; i, j &#125;;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;No two sum solution&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  复杂度分析：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">时间复杂度：O(n^2)O(n2)</span><br><span class="hljs-comment">对于每个元素，我们试图通过遍历数组的其余部分来寻找它所对应的目标元素，</span><br><span class="hljs-comment">这将耗费 O(n)O(n) 的时间。因此时间复杂度为 O(n^2)O(n2)。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">空间复杂度：O(1)O(1)。</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. 两数之和 （two-pointers）</title>
    <link href="/2021/05/08/leetcode/twoSum1/"/>
    <url>/2021/05/08/leetcode/twoSum1/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-comment">// 结果数组</span><br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-comment">// 克隆传入数组</span><br>        <span class="hljs-keyword">int</span>[] temp = nums.clone();<br>        <span class="hljs-comment">// 对临时数组从小到大排序</span><br>        Arrays.sort(temp);<br>        <span class="hljs-comment">// 初始化左右指针</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = temp.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 不重合</span><br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>            <span class="hljs-comment">// 两数之和大于目标值, 将右边的指针左移</span><br>            <span class="hljs-keyword">if</span> (temp[i] + temp[j] &gt; target) &#123;<br>                j--;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp[i] + temp[j] &lt; target) &#123;<br>                i++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// n为数组总长度</span><br>        <span class="hljs-keyword">int</span> n = temp.length;<br>        <span class="hljs-comment">// 循环找出临时数组中在传入数组中的下标, 并赋值给结果数组</span><br>        <span class="hljs-comment">// i&lt;n, i=n, 保证找到一个后不再重复指向同一个,&quot;移走&quot;指针</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++) &#123;<br>            <span class="hljs-keyword">if</span> (i &lt; n &amp;&amp; temp[i] == nums[k]) &#123;<br>                res[<span class="hljs-number">0</span>] = k;<br>                i = n;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j &lt; n &amp;&amp; temp[j] == nums[k]) &#123;<br>                res[<span class="hljs-number">1</span>] = k;<br>                j = n;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. 两数之和 (HashMap)</title>
    <link href="/2021/05/08/leetcode/twoSum2/"/>
    <url>/2021/05/08/leetcode/twoSum2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution2</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Integer, Integer&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt; nums.length; i++)&#123;<br>            map.put(nums[i], i);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt; nums.length; i++)&#123;<br>            <span class="hljs-keyword">int</span> aim = target-nums[i];<br>            <span class="hljs-keyword">if</span>(map.containsKey(aim) &amp;&amp; map.get(aim) != i)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;i, map.get(aim)&#125;;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>HashMap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zoj1037</title>
    <link href="/2021/05/08/zoj/zoj1037/"/>
    <url>/2021/05/08/zoj/zoj1037/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">zoj1037</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> total,m,n;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0</span>;<br>        total = in.nextInt();<br>        <span class="hljs-keyword">while</span>(total &gt; <span class="hljs-number">0</span>)&#123;<br>            m = in.nextInt();<br>            n = in.nextInt();<br>            count++;<br>            System.out.println(<span class="hljs-string">&quot;Scenario #&quot;</span>+count+<span class="hljs-string">&quot;:&quot;</span>);<br>            <span class="hljs-keyword">if</span>( m%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> || n%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                sum = m*n;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                sum = m*n +<span class="hljs-number">0.41</span>;<br>            &#125;<br>            System.out.printf(<span class="hljs-string">&quot;%#.2f\n&quot;</span>,sum);<br>            System.out.println();<br>            total --;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>zoj算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zoj1001</title>
    <link href="/2021/05/07/zoj/zoj1001/"/>
    <url>/2021/05/07/zoj/zoj1001/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">zoj1001</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">while</span> (in.hasNextInt()) &#123;<br>            <span class="hljs-keyword">int</span> a = in.nextInt();<br>            <span class="hljs-keyword">int</span> b = in.nextInt();<br>            System.out.println(a + b);<br>        &#125;<br>        in.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>zoj算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
