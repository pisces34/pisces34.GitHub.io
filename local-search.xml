<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>28. 实现 strStr()</title>
    <link href="/2021/06/12/leetcode/kmp/"/>
    <url>/2021/06/12/leetcode/kmp/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">strStr</span><span class="hljs-params">(string haystack, string needle)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> m = haystack.<span class="hljs-built_in">size</span>(), i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> n = needle.<span class="hljs-built_in">size</span>(), j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (needle.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(haystack.<span class="hljs-built_in">empty</span>()|| m&lt;n)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">size_t</span> length = needle.<span class="hljs-built_in">size</span>(), fast = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> *next = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length];<br>        <span class="hljs-keyword">int</span> slow = next[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span> (fast &lt; length<span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((<span class="hljs-number">0</span> &gt; slow || needle[fast] == needle[slow])) &#123;<br>                fast++;<br>                slow++;<br>                next[fast] = slow;<br>                <span class="hljs-comment">//next[fast] = (needle[fast] != needle[slow] ? slow : next[slow]);</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                slow = next[slow];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (j &lt; n &amp;&amp; i &lt; m) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &gt; j || haystack[i] == needle[j]) &#123;<br>                i++;<br>                j++;<br>                <span class="hljs-keyword">if</span>(needle[j]==<span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>                    flag = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<span class="hljs-comment">//已经找到末尾</span><br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                j = next[j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">delete</span>[] next;<br>        <span class="hljs-keyword">if</span> (flag) <span class="hljs-keyword">return</span> i-j;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//KMP 主算法参考代码：</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">match</span> <span class="hljs-params">(<span class="hljs-keyword">char</span>* P, <span class="hljs-keyword">char</span>* S)</span></span>&#123; <span class="hljs-comment">// KMP 算法</span><br>    <span class="hljs-keyword">int</span>* next = <span class="hljs-built_in">buildNext</span>(P); <span class="hljs-comment">// 构造 next 表</span><br>    <span class="hljs-keyword">int</span> m = (<span class="hljs-keyword">int</span>) <span class="hljs-built_in">strlen</span> (S), i = <span class="hljs-number">0</span>; <span class="hljs-comment">// 文本串指针</span><br>    <span class="hljs-keyword">int</span> n = (<span class="hljs-keyword">int</span>) <span class="hljs-built_in">strlen</span>(P), j = <span class="hljs-number">0</span>; <span class="hljs-comment">//模式串指针</span><br>    <span class="hljs-keyword">while</span> (j &lt; n &amp;&amp; i &lt; m) <span class="hljs-comment">// 自左向右逐个比对字符</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &gt; j || S[i] == P[j]) <span class="hljs-comment">// 若匹配，或 P 已移除最左侧</span><br>            &#123;i++; j++;&#125; <span class="hljs-comment">// 则转到下一字符</span><br>        <span class="hljs-keyword">else</span><br>            j = next[j]; <span class="hljs-comment">// 模式串右移（注意：文本串不用回退）</span><br>    <span class="hljs-keyword">delete</span> [] next; <span class="hljs-comment">// 释放 next 表</span><br>    <span class="hljs-keyword">return</span> i - j;<br>&#125;<br><span class="hljs-comment">//构造 next 表参考代码：</span><br><span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">buildNext</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* P)</span> </span>&#123; <span class="hljs-comment">// 构造模式串 P 的 next 表</span><br>    <span class="hljs-keyword">size_t</span> m = <span class="hljs-built_in">strlen</span>(P), j = <span class="hljs-number">0</span>; <span class="hljs-comment">// “主”串指针</span><br>    <span class="hljs-keyword">int</span>* N = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m]; <span class="hljs-comment">// next 表</span><br>    <span class="hljs-keyword">int</span>  t = N[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 模式串指针</span><br>    <span class="hljs-keyword">while</span> (j &lt; m - <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> ( <span class="hljs-number">0</span> &gt; t || P[j] == P[t])&#123; <span class="hljs-comment">// 匹配</span><br>            j++; t++;<br>            N[j] = t; <span class="hljs-comment">// 此句可改进为 N[j] = (P[j] != P[t] ? t : N[t]);</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-comment">// 失配</span><br>        t = N[t];<br>    <span class="hljs-keyword">return</span> N;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>KMP</tag>
      
      <tag>字符串匹配</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 58 - I. 翻转单词顺序</title>
    <link href="/2021/06/10/leetcode/revers1/"/>
    <url>/2021/06/10/leetcode/revers1/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/">https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/</a></p><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00% 的用户<br>内存消耗：7.1 MB, 在所有 C++ 提交中击败了47.16% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">reverseWords</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,start;<br>        <span class="hljs-keyword">while</span> (s[i]==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>            start++;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">int</span> n =s.<span class="hljs-built_in">size</span>();<br>        string res=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">int</span> right = n<span class="hljs-number">-1</span>,left = right;<br>        <span class="hljs-keyword">while</span> (left&gt;=start)&#123;<br>            <span class="hljs-keyword">if</span> (s[right]==<span class="hljs-number">32</span>&amp;&amp;right&gt;<span class="hljs-number">0</span>)&#123;<br>                right--;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            left = right;<br>            <span class="hljs-keyword">while</span> (s[left]!=<span class="hljs-number">32</span>&amp;&amp;left&gt;<span class="hljs-number">0</span>)&#123;<br>                left--;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (left==start)&#123;left--;&#125;;<br>            <span class="hljs-keyword">for</span> (i = left+<span class="hljs-number">1</span>; i &lt;= right; ++i) &#123;<br>                res+=s[i];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (left&gt;start)&#123;res+=<span class="hljs-string">&#x27; &#x27;</span>;&#125;<br>            right = left;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>双指针</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>48. 旋转图像</title>
    <link href="/2021/06/10/leetcode/rotateMatrix/"/>
    <url>/2021/06/10/leetcode/rotateMatrix/</url>
    
    <content type="html"><![CDATA[<p>题目地址：<a href="https://leetcode-cn.com/problems/rotate-image/">https://leetcode-cn.com/problems/rotate-image/</a><br>执行用时：8 ms, 在所有 C++ 提交中击败了42.94% 的用户<br>内存消耗：6.8 MB, 在所有 C++ 提交中击败了90.84% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> N = matrix.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> i,j;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i&lt; N; i++ )&#123; <span class="hljs-comment">//矩阵转置</span><br>            <span class="hljs-keyword">for</span>(j = i+<span class="hljs-number">1</span>; j&lt;N; j++)&#123;<br>                <span class="hljs-built_in">swap</span>(matrix[i][j],matrix[j][i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i&lt; N; i++ )&#123; <span class="hljs-comment">//水平翻转</span><br>               <span class="hljs-built_in">reverse</span>(matrix[i].<span class="hljs-built_in">begin</span>(),matrix[i].<span class="hljs-built_in">end</span>());<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>矩阵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5. 最长回文子串</title>
    <link href="/2021/06/09/leetcode/longest/"/>
    <url>/2021/06/09/leetcode/longest/</url>
    
    <content type="html"><![CDATA[<p>题目地址：<a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">https://leetcode-cn.com/problems/longest-palindromic-substring/</a><br>执行用时：304 ms, 在所有 C++ 提交中击败了51.32% 的用户<br>内存消耗：7 MB, 在所有 C++ 提交中击败了83.19% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> length = s.<span class="hljs-built_in">length</span>();<br>        string maxs = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">empty</span>()||s.<span class="hljs-built_in">size</span>()&lt;<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">return</span> s;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> end,left,right,i;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; length; ++i) &#123;<br>                end = length - <span class="hljs-number">1</span>;<br>                right = end;<br>                left = i;<br>                <span class="hljs-keyword">while</span> (right &gt; left)&#123;<br>                    <span class="hljs-keyword">if</span> (s[right] == s[left])&#123;<br>                        --right;<br>                        ++left;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        end--;<br>                        right = end;<br>                        left = i;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> ((end-i+<span class="hljs-number">1</span>) &gt; maxs.<span class="hljs-built_in">size</span>())&#123;<br>                    maxs = s.<span class="hljs-built_in">substr</span>(i,end-i+<span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxs;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>回文字符串</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14.最长公共前缀</title>
    <link href="/2021/06/08/leetcode/Longest%20Common%20Prefix/"/>
    <url>/2021/06/08/leetcode/Longest%20Common%20Prefix/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/longest-common-prefix/">https://leetcode-cn.com/problems/longest-common-prefix/</a></p><p>执行用时：4 ms, 在所有 C++ 提交中击败了89.08% 的用户<br>内存消耗：8.7 MB, 在所有 C++ 提交中击败了96.19% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestCommonPrefix</span><span class="hljs-params">(vector&lt;string&gt; &amp;strs)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> n=strs.<span class="hljs-built_in">size</span>();<br>        string sub = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (strs[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) &#123; <span class="hljs-keyword">return</span> sub; &#125;<br>        <span class="hljs-keyword">if</span>(n&gt;<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">while</span> (strs[<span class="hljs-number">0</span>][j] == strs[i][j] &amp;&amp; (strs[i][j] != <span class="hljs-string">&#x27;\0&#x27;</span>)) &#123;<br>                <span class="hljs-keyword">if</span> (i == n- <span class="hljs-number">1</span>) &#123;<br>                    sub += strs[<span class="hljs-number">0</span>][j];<br>                    j++;<br>                    i = <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">return</span> sub;<br>        &#125;<br>        <span class="hljs-keyword">return</span> strs[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
      <category>[object Object]</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>498. Diagonal Traverse</title>
    <link href="/2021/06/06/leetcode/Diagonal%20Traverse/"/>
    <url>/2021/06/06/leetcode/Diagonal%20Traverse/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/diagonal-traverse/">https://leetcode-cn.com/problems/diagonal-traverse/</a><br>执行用时：28 ms, 在所有 C++ 提交中击败了79.11% 的用户<br>内存消耗：18 MB, 在所有 C++ 提交中击败了17.22% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">findDiagonalOrder</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; mat)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> row = mat.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> col = mat[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; mid;<br>        <span class="hljs-keyword">if</span>(mat.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span> mid;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;row+col<span class="hljs-number">-1</span>; ++i) &#123;<br>            mid.<span class="hljs-built_in">clear</span>();<br>            <span class="hljs-keyword">int</span> r = i&lt;col?<span class="hljs-number">0</span>:i-col+<span class="hljs-number">1</span>; <span class="hljs-comment">// 行遍历完到下一列</span><br>            <span class="hljs-keyword">int</span> c = i&lt;col?i:col<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">while</span> (r&lt; row &amp;&amp; c&gt;<span class="hljs-number">-1</span>) &#123;<br>                mid.<span class="hljs-built_in">push_back</span>(mat[r][c]);<br>                ++r; <span class="hljs-comment">// 下一行</span><br>                --c; <span class="hljs-comment">// 左边的列</span><br>            &#125;<br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//需要翻转的对角线</span><br>                <span class="hljs-built_in">reverse</span>(mid.<span class="hljs-built_in">begin</span>(), mid.<span class="hljs-built_in">end</span>());<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; mid.<span class="hljs-built_in">size</span>(); i++) &#123;<br>                res.<span class="hljs-built_in">push_back</span>(mid[i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>vector</tag>
      
      <tag>矩阵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题 01.08. 零矩阵</title>
    <link href="/2021/06/05/leetcode/setZeroes/"/>
    <url>/2021/06/05/leetcode/setZeroes/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/zero-matrix-lcci/">https://leetcode-cn.com/problems/zero-matrix-lcci/</a><br>暴力循环法<br>执行用时：12 ms, 在所有 C++ 提交中击败了88.06% 的用户<br>内存消耗：11.9 MB, 在所有 C++ 提交中击败了45.29% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setZeroes</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> row = matrix.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> col = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> index[row][col];<br>        <span class="hljs-built_in">memset</span>(&amp;index[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(index)); <br>        <span class="hljs-keyword">int</span> i,j;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;row; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;col; ++j)&#123;<br>                <span class="hljs-keyword">if</span>(matrix[i][j] == <span class="hljs-number">0</span>)&#123;<br>                    index[i][j] = <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;row; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;col; ++j)&#123;<br>                <span class="hljs-keyword">if</span>(index[i][j])&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>; k&lt;col; ++k)&#123;<br>                        matrix[i][k] = <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;row; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;col; ++j)&#123;<br>                <span class="hljs-keyword">if</span>(index[i][j])&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>; k&lt;row; ++k)&#123;<br>                        matrix[k][j] = <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//另一种简化版</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setZeroes</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> rowLength = matrix.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> colLength = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; row;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; col;<br>        <span class="hljs-keyword">int</span> i,j;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;rowLength; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;colLength; ++j)&#123;<br>                <span class="hljs-keyword">if</span>(matrix[i][j] == <span class="hljs-number">0</span>)&#123;<br>                    row.<span class="hljs-built_in">push_back</span>(i);<br>                    col.<span class="hljs-built_in">push_back</span>(j);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;rowLength; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;colLength; ++j)&#123;<br>                matrix[row[i]][j] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;colLength; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;colLength; ++j)&#123;<br>               matrix[j][col[i]] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>矩阵</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>56. 合并区间</title>
    <link href="/2021/05/26/leetcode/merge/"/>
    <url>/2021/05/26/leetcode/merge/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">merge</span>(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; &amp;intervals) &#123;<br>        <span class="hljs-keyword">int</span> length = intervals.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>;<br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; res;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; val;<br>        <span class="hljs-keyword">if</span> (length == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> intervals;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">sort</span>(intervals.<span class="hljs-built_in">begin</span>(), intervals.<span class="hljs-built_in">end</span>());<br>            res.<span class="hljs-built_in">push_back</span>(intervals[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = start + <span class="hljs-number">1</span>; i &lt; length; ++i) &#123;<br>                <span class="hljs-keyword">if</span> (res[start][<span class="hljs-number">1</span>] &gt;= intervals[i][<span class="hljs-number">0</span>]) &#123;<br>                    res[start][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(res[start][<span class="hljs-number">1</span>], intervals[i][<span class="hljs-number">1</span>]);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    res.<span class="hljs-built_in">push_back</span>(intervals[i]);<br>                    start++;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
      <category>[object Object]</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>vector</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 22. 链表中倒数第k个节点</title>
    <link href="/2021/05/21/leetcode/k/"/>
    <url>/2021/05/21/leetcode/k/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">getKthFromEnd</span><span class="hljs-params">(ListNode* head, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-comment">//初始化指向表头</span><br>        ListNode *pre=head, *last=head;<br>        <span class="hljs-comment">//先往后走</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>; i&lt;=k; i++)&#123;<br>            last = last-&gt;next;<br>        &#125;<br>        <span class="hljs-comment">//同时移动指针</span><br>        <span class="hljs-keyword">while</span>(last != <span class="hljs-literal">NULL</span>)&#123;<br>            pre = pre-&gt;next;<br>            last = last-&gt;next;<br>        &#125;<br>        <span class="hljs-comment">//返回前一个指针</span><br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00% 的用户<br>内存消耗：10.3 MB, 在所有 C++ 提交中击败了57.96% 的用户</p>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>双指针</tag>
      
      <tag>C++</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>206. 反转链表 C++</title>
    <link href="/2021/05/18/leetcode/reverseList/"/>
    <url>/2021/05/18/leetcode/reverseList/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/reverse-linked-list/">https://leetcode-cn.com/problems/reverse-linked-list/</a><br>执行用时：4 ms, 在所有 C++ 提交中击败了96.52% 的用户<br>内存消耗：8 MB, 在所有 C++ 提交中击败了91.52% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++">**<br> * Definition <span class="hljs-keyword">for</span> singly-linked list.<br> * <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> &#123;</span><br> *     <span class="hljs-keyword">int</span> val;<br> *     ListNode *next;<br> *     <span class="hljs-built_in">ListNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br> *     <span class="hljs-built_in">ListNode</span>(<span class="hljs-keyword">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br> *     <span class="hljs-built_in">ListNode</span>(<span class="hljs-keyword">int</span> x, ListNode *next) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(next) &#123;&#125;<br> * &#125;;<br> */<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode *pre = <span class="hljs-literal">NULL</span>;<br>        ListNode *cur = head;<br>        ListNode *next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">NULL</span>)&#123;<br>            next = cur-&gt;next;<br>            cur-&gt;next = pre;<br>            pre = cur;<br>            cur= next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>三指针</tag>
      
      <tag>反转链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1012 数字分类</title>
    <link href="/2021/05/15/patB/basic-1012/"/>
    <url>/2021/05/15/patB/basic-1012/</url>
    
    <content type="html"><![CDATA[<p>题目链接： <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805311146147840">https://pintia.cn/problem-sets/994805260223102976/problems/994805311146147840</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a1 = <span class="hljs-number">0</span>, a2 = <span class="hljs-number">0</span>, a3 = <span class="hljs-number">0</span>, a4 = <span class="hljs-number">0</span>, a5 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">float</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> N;<br>    <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>,x=<span class="hljs-number">1</span>;<br>    cin &gt;&gt; N;<br>    <span class="hljs-keyword">int</span> arr[N];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i) &#123;<br>        cin &gt;&gt; arr[i];<br>        <span class="hljs-keyword">if</span> (arr[i] % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>) &#123;<br>            a1 += arr[i];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i] % <span class="hljs-number">5</span> == <span class="hljs-number">1</span>) &#123;<br>            flag = <span class="hljs-number">1</span>;<br>            a2 += x * arr[i];<br>            x = -x;;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i] % <span class="hljs-number">5</span> == <span class="hljs-number">2</span>) &#123;<br>            a3++;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i] % <span class="hljs-number">5</span> == <span class="hljs-number">3</span>) &#123;<br>            a4++;<br>            sum += arr[i];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i] % <span class="hljs-number">5</span> == <span class="hljs-number">4</span>) &#123; <span class="hljs-keyword">if</span> (arr[i] &gt;= a5) a5 = arr[i]; &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a1 == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N &quot;</span>); <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a1);<br>    <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N &quot;</span>); <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a2);<br>    <span class="hljs-keyword">if</span>(a3 == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N &quot;</span>); <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a3);<br>    <span class="hljs-keyword">if</span>(a4 == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N &quot;</span>); <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.1f &quot;</span>, sum/a4*<span class="hljs-number">1.0</span>);<br>    <span class="hljs-keyword">if</span>(a5 == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N&quot;</span>);  <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a5);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>35. 搜索插入位置</title>
    <link href="/2021/05/13/leetcode/search-insert/"/>
    <url>/2021/05/13/leetcode/search-insert/</url>
    
    <content type="html"><![CDATA[<p>题目链接 <a href="https://leetcode-cn.com/problems/search-insert-position/">https://leetcode-cn.com/problems/search-insert-position/</a><br>除了二分法外，还可以遍历全部，找不到即输出数组长度的值，也就是插入未知的下标。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> right = nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; <span class="hljs-comment">//注意边界</span><br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> mid;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            mid = left + (right - left) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (target &gt; nums[mid] ) &#123; <br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>二分法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>724. 寻找数组的中心下标 C++</title>
    <link href="/2021/05/12/leetcode/findArrayIndexC/"/>
    <url>/2021/05/12/leetcode/findArrayIndexC/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pivotIndex</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> leftSum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> val:nums) sum += val;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            <span class="hljs-keyword">if</span> (leftSum == sum - nums[i] - leftSum) &#123; <span class="hljs-comment">//左边之和等于右边之和，当下i为中间下标</span><br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>            leftSum += nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>hhh，执行结果不稳定，有时候挺好的。<br>执行用时：20 ms, 在所有 C++ 提交中击败了93.14% 的用户<br>内存消耗：30.2 MB, 在所有 C++ 提交中击败了77.02% 的用户</p>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过js web3访问以太坊钱包查询余额</title>
    <link href="/2021/05/11/block/getBalance/"/>
    <url>/2021/05/11/block/getBalance/</url>
    
    <content type="html"><![CDATA[<p>看了奇客谷上面的教程在Web3处遇到错误，不太了解js就搜了下别的方法，<br>安装好npm , node 和npm install web3后（百度即可），运行下面的代码可以查询到余额</p><p><img src="/img/getBalance.jpg" alt="图片"><br>价格约 💲14,357,735.16 (@$3,968.73/ETH)<br>时间: 2021/5/11/20:25</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> Web3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;web3&#x27;</span>)<br><span class="hljs-keyword">const</span> web3 = <span class="hljs-keyword">new</span> Web3(<span class="hljs-keyword">new</span> Web3.providers.HttpProvider(<span class="hljs-string">&quot;https://mainnet.infura.io/v3/YOUR_PROJECT_ID&quot;</span>)); <br><span class="hljs-keyword">const</span> address = <span class="hljs-string">&#x27;0xb5d85CBf7cB3EE0D56b3bB207D5Fc4B82f43F511&#x27;</span> <span class="hljs-comment">// 账户地址</span><br><span class="hljs-comment">// 读取address中的余额，余额单位是wei</span><br>web3.eth.getBalance(address, <span class="hljs-function">(<span class="hljs-params">err, wei</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 余额单位从wei转换为ether</span><br>    balance = web3.utils.fromWei(wei, <span class="hljs-string">&#x27;ether&#x27;</span>)<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;balance:&quot;</span> +balance)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>interesting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ETH</tag>
      
      <tag>JavaScript</tag>
      
      <tag>web3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1008 数组元素循环右移问题</title>
    <link href="/2021/05/10/patB/basic-1008/"/>
    <url>/2021/05/10/patB/basic-1008/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> N = in.nextInt();<br>        <span class="hljs-keyword">int</span> M = in.nextInt();<br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">100</span>];<br>        M = M % N;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            arr[i] = in.nextInt();<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = N - M; i &lt;= N - <span class="hljs-number">1</span>; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N - M - <span class="hljs-number">1</span>; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.print(arr[N - M - <span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>包装类，拆箱装箱</title>
    <link href="/2021/05/09/Learn/%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    <url>/2021/05/09/Learn/%E5%8C%85%E8%A3%85%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">boxing</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 装箱: 把基本数据类型转换成包装类</span><br>        <span class="hljs-comment">// 1. 自动装箱</span><br>        <span class="hljs-keyword">int</span> t1 = <span class="hljs-number">2</span>;<br>        Integer t2 = t1;<br>        <span class="hljs-comment">// 2. 手动装箱</span><br>        Integer t3 = <span class="hljs-keyword">new</span> Integer(t1);<br>        <span class="hljs-comment">// 测试</span><br>        System.out.println(<span class="hljs-string">&quot;int 类型变量t1=&quot;</span> + t1);<br>        System.out.println(<span class="hljs-string">&quot;Integer 类型变量t2=&quot;</span> + t2);<br>        System.out.println(<span class="hljs-string">&quot;Integer 类型变量t1=&quot;</span> + t3);<br>        System.out.println(<span class="hljs-string">&quot;****************&quot;</span>);<br>        <span class="hljs-comment">// 拆箱: 把包装类转换成基本数据类型</span><br>        <span class="hljs-comment">// 1. 自动拆箱</span><br>        <span class="hljs-keyword">int</span> t4 = t2;<br>        <span class="hljs-comment">// 2. 手动拆箱</span><br>        <span class="hljs-keyword">int</span> t5 = t2.intValue();<br>        <span class="hljs-comment">// 测试</span><br>        System.out.println(<span class="hljs-string">&quot;Integer 类型对象t4=&quot;</span> + t4);<br>        System.out.println(<span class="hljs-string">&quot;Integer 类型对象t5=&quot;</span> + t5);<br>        <span class="hljs-keyword">double</span> t6 = t2.doubleValue();<br>        System.out.println(<span class="hljs-string">&quot;手动拆箱后: &quot;</span> + t6);<br><br>        <span class="hljs-comment">// 定义int类型变量，值为100</span><br>        <span class="hljs-keyword">int</span> score = <span class="hljs-number">100</span>;<br>        <span class="hljs-comment">// 创建Integer包装类对象，表示变量score1的值</span><br>        Integer score1 = score;<br>        <span class="hljs-comment">// 将Integer包装类转换为double类型</span><br>        <span class="hljs-keyword">double</span> score2 = score1;<br>        <span class="hljs-comment">// 将Integer包装类转换为long类型</span><br>        <span class="hljs-keyword">long</span> score3 = score1;<br>        <span class="hljs-comment">// 将Integer包装类转换为int类型</span><br>        <span class="hljs-keyword">int</span> score4 = score1.intValue();<br>        <span class="hljs-comment">// 打印输出</span><br>        System.out.println(<span class="hljs-string">&quot;score对应的Integer类型结果为: &quot;</span> + score1);<br>        System.out.println(<span class="hljs-string">&quot;score对应的double类型结果为: &quot;</span> + score2);<br>        System.out.println(<span class="hljs-string">&quot;score对应的long类型结果为: &quot;</span> + score3);<br>        System.out.println(<span class="hljs-string">&quot;重新由Integer转换为int类型的结果为: &quot;</span> + score4);<br><br><br>        <span class="hljs-comment">// 基本数据类型转换为字符串</span><br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">1</span>;<br>        String s = Integer.toString(num);<br>        System.out.println(<span class="hljs-string">&quot;int类型转换为String类型s= &quot;</span> + s);<br>        <span class="hljs-comment">// 字符串转换为基本数据类型</span><br>        <span class="hljs-comment">// 1. 包装类的parse</span><br>        <span class="hljs-keyword">int</span> num1 = Integer.parseInt(s);<br>        <span class="hljs-comment">// 2. 包装类的valueOf 先将字符串转换为包装类, 再通过自动拆箱完成基本数据转换</span><br>        <span class="hljs-keyword">int</span> num2 = Integer.valueOf(s);<br>        System.out.println(<span class="hljs-string">&quot;String类型转换为int类型num1= &quot;</span> + num1);<br>        System.out.println(<span class="hljs-string">&quot;String类型转换为int类型num2= &quot;</span> + num2);<br>        <span class="hljs-keyword">double</span> a = <span class="hljs-number">12.5</span>;<br>        <span class="hljs-comment">// 将基本类型转换为字符串</span><br>        String str1 = Double.toString(a) + <span class="hljs-number">10</span>;<br>        System.out.println(<span class="hljs-string">&quot;a 转换为String型后+10的结果为： &quot;</span> + str1);<br>        String str = <span class="hljs-string">&quot;2.8&quot;</span>;<br>        <span class="hljs-comment">// 将字符串转换为基本类型</span><br>        <span class="hljs-keyword">double</span> b = <span class="hljs-keyword">new</span> Double(str) + <span class="hljs-number">10</span>;<br>        System.out.println(<span class="hljs-string">&quot;str 转换为double型后+10的结果为： &quot;</span> + b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1074 Reversing Linked List</title>
    <link href="/2021/05/08/patA/1074/"/>
    <url>/2021/05/08/patA/1074/</url>
    
    <content type="html"><![CDATA[<p>题目链接 <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805394512134144">https://pintia.cn/problem-sets/994805342720868352/problems/994805394512134144</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> first, k, n, sum = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; first &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">int</span> temp, data[<span class="hljs-number">100005</span>], next[<span class="hljs-number">100005</span>], list[<span class="hljs-number">100005</span>], result[<span class="hljs-number">100005</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; temp;<br>        cin &gt;&gt; data[temp] &gt;&gt; next[temp];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (first != <span class="hljs-number">-1</span>) &#123;<br>        list[sum++] = first;<br>        first = next[first];<br>    &#125;<br>    <span class="hljs-comment">//result[100] r[12309] r[33218] r[00000] r[99999] r[68237]</span><br>    <span class="hljs-comment">//1-2-3-4-5-6-7-8</span><br>    <span class="hljs-comment">//3-2-1-6-5-4-7-8</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; sum; i++) result[i] = list[i];<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, i, index = k;<br>    <span class="hljs-keyword">int</span> cnt = sum / k;<br>    <span class="hljs-keyword">while</span> (cnt--) &#123; <span class="hljs-comment">// 循环实现更好理解，下面的公式还不会</span><br>        <span class="hljs-keyword">for</span> (i = left; i &lt; k + left; ++i) &#123;<br>            result[i] = list[--index];<br>        &#125;<br>        left = i;<br>        index = k + left;<br>    &#125;<br><br><span class="hljs-comment">/*liuchuo.net</span><br><span class="hljs-comment">*    for (int i = 0; i &lt; (sum - sum % k); i++)</span><br><span class="hljs-comment">*       result[i] = list[i / k * k + k - 1 - i % k];</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; sum - <span class="hljs-number">1</span>; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d %d %05d\n&quot;</span>, result[i], data[result[i]], result[i + <span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d %d -1&quot;</span>, result[sum - <span class="hljs-number">1</span>], data[result[sum - <span class="hljs-number">1</span>]]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat甲级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>反转链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1051 Pop Sequence</title>
    <link href="/2021/05/08/patA/1051/"/>
    <url>/2021/05/08/patA/1051/</url>
    
    <content type="html"><![CDATA[<p>===<br>题目链接：<a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805427332562944">https://pintia.cn/problem-sets/994805342720868352/problems/994805427332562944</a><br>===</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> m,n,k;<br>    cin&gt;&gt;m&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; ++i) &#123;<br>        stack&lt;<span class="hljs-keyword">int</span> &gt;(s);<br>        <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">int</span> current = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>            s.<span class="hljs-built_in">push</span>(i);<br>            <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">size</span>() &gt; m) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">while</span> (!s.<span class="hljs-built_in">empty</span>() &amp;&amp; s.<span class="hljs-built_in">top</span>() == v[current]) &#123;<br>                s.<span class="hljs-built_in">pop</span>();<br>                current++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (current == n + <span class="hljs-number">1</span>) flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (flag) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat甲级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>堆栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1007 Maximum Subsequence Sum</title>
    <link href="/2021/05/08/patA/1007/"/>
    <url>/2021/05/08/patA/1007/</url>
    
    <content type="html"><![CDATA[<p>===<br>题目链接：<a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805514284679168">https://pintia.cn/problem-sets/994805342720868352/problems/994805514284679168</a><br>===</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Max 100001</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> N;<br>    <span class="hljs-keyword">int</span> A[Max],tempIndex=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;N);<br>    <span class="hljs-keyword">int</span> ThisSum, MaxSum,i;<br>    ThisSum = <span class="hljs-number">0</span>;<br>    MaxSum = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">int</span> left=<span class="hljs-number">0</span>,right=N<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; N; i++ ) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;A[i]);<br>        ThisSum += A[i];<br>        <span class="hljs-keyword">if</span>(ThisSum &lt; <span class="hljs-number">0</span>) &#123;<br>            ThisSum = <span class="hljs-number">0</span>;    <span class="hljs-comment">//变小则清0</span><br>            tempIndex = i+<span class="hljs-number">1</span>; <span class="hljs-comment">//移动边界</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ThisSum &gt; MaxSum) &#123;<br>            MaxSum = ThisSum;<br>            left = tempIndex; <br>            right = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (MaxSum&lt;<span class="hljs-number">0</span>) &#123;<br>        MaxSum = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,MaxSum, A[left], A[right]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat甲级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>在线处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1016 部分A+B</title>
    <link href="/2021/05/08/patB/basic-1016/"/>
    <url>/2021/05/08/patB/basic-1016/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a,da,b,db;<br>    <span class="hljs-keyword">int</span> pa=<span class="hljs-number">0</span>,pb=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>,&amp;a,&amp;da,&amp;b,&amp;db);<br>    <span class="hljs-keyword">while</span>(a)&#123;<br>        <span class="hljs-keyword">if</span>(a%<span class="hljs-number">10</span> == da)&#123;<br>            pa= pa*<span class="hljs-number">10</span>;<br>            pa+=da;<br>        &#125;<br>        a= a/<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(b)&#123;<br>        <span class="hljs-keyword">if</span>(b%<span class="hljs-number">10</span> == db)&#123;<br>            pb= pb*<span class="hljs-number">10</span>;<br>            pb+=db;<br>        &#125;<br>        b= b/<span class="hljs-number">10</span>;<br>    &#125;<br>    cout&lt;&lt;(pa+pb)&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1026 程序运行时间 (java)</title>
    <link href="/2021/05/08/patB/basic-1026(java)/"/>
    <url>/2021/05/08/patB/basic-1026(java)/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> C1, C2;<br>        C1 = in.nextInt();<br>        C2 = in.nextInt();<br>        <span class="hljs-keyword">int</span> tck = (C2 - C1 +<span class="hljs-number">50</span>)/<span class="hljs-number">100</span> ;<br>        <span class="hljs-keyword">int</span> hour, minute, second;<br>        hour = tck / <span class="hljs-number">3600</span>;<br>        minute = tck % <span class="hljs-number">3600</span> / <span class="hljs-number">60</span>;<br>        second = tck % <span class="hljs-number">60</span>;<br>        System.out.println(String.format(<span class="hljs-string">&quot;%02d:%02d:%02d&quot;</span>,hour,minute,second));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1026 程序运行时间</title>
    <link href="/2021/05/08/patB/basic-1026/"/>
    <url>/2021/05/08/patB/basic-1026/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CLK_TCK 100</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> c1,c2;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;c1,&amp;c2);<br>    <span class="hljs-keyword">int</span> second = (c2-c1+<span class="hljs-number">50</span>)*<span class="hljs-number">1.0</span>/CLK_TCK;<br>    <span class="hljs-keyword">int</span> hour = second/<span class="hljs-number">3600</span>;<br>    <span class="hljs-keyword">int</span> minute = (second%<span class="hljs-number">3600</span>)/<span class="hljs-number">60</span>;<br>    <span class="hljs-keyword">int</span> s = second-hour*<span class="hljs-number">3600</span>-minute*<span class="hljs-number">60</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%02d:%02d:%02d&quot;</span>,hour,minute,s);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1046 划拳 (java)</title>
    <link href="/2021/05/08/patB/basic-1046(java)/"/>
    <url>/2021/05/08/patB/basic-1046(java)/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> N;<br>        <span class="hljs-keyword">int</span> say1,do1,say2,do2;<br>        <span class="hljs-keyword">int</span> A = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> B = <span class="hljs-number">0</span>;<br>        N = in.nextInt();<br>        <span class="hljs-keyword">while</span>(N != <span class="hljs-number">0</span>) &#123;<br>            say1 = in.nextInt();<br>            do1 = in.nextInt();<br>            say2 = in.nextInt();<br>            do2 = in.nextInt();<br>            <span class="hljs-keyword">int</span> sum = say1 + say2;<br>            <span class="hljs-keyword">if</span>(sum == do1 &amp;&amp; sum != do2)&#123;<br>                B++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum == do2 &amp;&amp; sum != do1)&#123;<br>                A++;<br>            &#125;<br>            N--;<br>        &#125;<br>        System.out.println(A+<span class="hljs-string">&quot; &quot;</span>+B);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1046 划拳</title>
    <link href="/2021/05/08/patB/basic-1046/"/>
    <url>/2021/05/08/patB/basic-1046/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> A, a, B, b;<br>    <span class="hljs-keyword">int</span> sum1, sum2;<br>    <span class="hljs-keyword">int</span> N;<br>    cin &gt;&gt; N;<br>    <span class="hljs-keyword">while</span> (N--) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, &amp;A, &amp;a, &amp;B, &amp;b);<br>        <span class="hljs-keyword">if</span> ((A + B) == a &amp;&amp; (A + B) != b) &#123;<br>            sum1++;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((A + B) == b &amp;&amp; (A + B) != a) &#123;<br>            sum2++;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; sum2 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; sum1 &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1002 写出这个数</title>
    <link href="/2021/05/08/patB/basic-1002/"/>
    <url>/2021/05/08/patB/basic-1002/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string s;<br>    string pinyin[<span class="hljs-number">10</span>]=&#123;<span class="hljs-string">&quot;ling&quot;</span>,<span class="hljs-string">&quot;yi&quot;</span>,<span class="hljs-string">&quot;er&quot;</span>,<span class="hljs-string">&quot;san&quot;</span>,<span class="hljs-string">&quot;si&quot;</span>,<span class="hljs-string">&quot;wu&quot;</span>,<span class="hljs-string">&quot;liu&quot;</span>,<span class="hljs-string">&quot;qi&quot;</span>,<span class="hljs-string">&quot;ba&quot;</span>,<span class="hljs-string">&quot;jiu&quot;</span>&#125;;<br>    cin&gt;&gt;s;<br>    <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">length</span>(); ++i) &#123;<br>        sum+=(s[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    &#125;<br>    string num = <span class="hljs-built_in">to_string</span>(sum);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num.<span class="hljs-built_in">length</span>(); ++i) &#123;<br>        <span class="hljs-keyword">if</span>(i!=<span class="hljs-number">0</span>) cout&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        cout&lt;&lt;pinyin[num[i]-<span class="hljs-string">&#x27;0&#x27;</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1001 害死人不偿命的(3n+1)猜想</title>
    <link href="/2021/05/08/patB/basic-1001(3n+1)/"/>
    <url>/2021/05/08/patB/basic-1001(3n+1)/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">while</span>(n!=<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>            n /=<span class="hljs-number">2</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            n = (<span class="hljs-number">3</span>*n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>        &#125;<br>        count++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,count);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>678. 有效的括号字符串</title>
    <link href="/2021/05/08/leetcode/checkValidString/"/>
    <url>/2021/05/08/leetcode/checkValidString/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/***</span><br><span class="hljs-comment">看了题解下面的思路，非常便捷，原代码是三目表达式改写成if else了。</span><br><span class="hljs-comment">“有效的字符串，即从左向右看是有效的，从右向左看也是有效的</span><br><span class="hljs-comment">如果在遍历过程中，left或者right小于0，则是无效”</span><br><span class="hljs-comment">***/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">checkValidString</span><span class="hljs-params">(string s)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> right = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">length</span>(); ++i) &#123;<br>        <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;)&#x27;</span>)&#123;<br>            left--; <br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            left++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(s[s.<span class="hljs-built_in">length</span>()-i<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;(&#x27;</span>)&#123; <span class="hljs-comment">//i从0开始，但是长度是从1开始数，所以-1</span><br>            right--;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            right++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (left&lt;<span class="hljs-number">0</span> || right &lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>双指针</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>724. 寻找数组的中心下标</title>
    <link href="/2021/05/08/leetcode/findArrayIndex/"/>
    <url>/2021/05/08/leetcode/findArrayIndex/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pivotIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> leftSum =<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i:nums) &#123;<br>            sum+=i;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(leftSum == sum - leftSum-nums[i])&#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>            leftSum+=nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11. 盛最多水的容器</title>
    <link href="/2021/05/08/leetcode/ContainerWithMostWater/"/>
    <url>/2021/05/08/leetcode/ContainerWithMostWater/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//双指针法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] height)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> area = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = height.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            area = Math.min(height[left], height[right])*(right-left);<br>            ans = Math.max(area, ans);<br>            <span class="hljs-keyword">if</span>(height[left] &gt;= height[right]) &#123;<br>                right--;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                left++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//暴力法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Violence</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] height)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> max = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> area = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> wide = height.length;<br>        <span class="hljs-keyword">int</span> blow = wide -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(left=<span class="hljs-number">0</span>; left &lt; wide; left++) &#123;<br>            blow = wide- <span class="hljs-number">1</span> - left;<br>            <span class="hljs-keyword">for</span>(right = wide -<span class="hljs-number">1</span>; right&gt; left ; right --) &#123;<br>                <span class="hljs-keyword">if</span>(height[left] &lt;= height[right]) &#123;<br>                    area = height[left]*blow;<br>                    blow --;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    area = height[right]*blow;<br>                    blow --;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(area &gt;= max) &#123;<br>                    max = area;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. 两数之和(violence)</title>
    <link href="/2021/05/08/leetcode/twoSum/"/>
    <url>/2021/05/08/leetcode/twoSum/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Violence</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; nums.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (nums[j] == target - nums[i]) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; i, j &#125;;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;No two sum solution&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  复杂度分析：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">时间复杂度：O(n^2)O(n2)</span><br><span class="hljs-comment">对于每个元素，我们试图通过遍历数组的其余部分来寻找它所对应的目标元素，</span><br><span class="hljs-comment">这将耗费 O(n)O(n) 的时间。因此时间复杂度为 O(n^2)O(n2)。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">空间复杂度：O(1)O(1)。</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. 两数之和 （two-pointers）</title>
    <link href="/2021/05/08/leetcode/twoSum1/"/>
    <url>/2021/05/08/leetcode/twoSum1/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-comment">// 结果数组</span><br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-comment">// 克隆传入数组</span><br>        <span class="hljs-keyword">int</span>[] temp = nums.clone();<br>        <span class="hljs-comment">// 对临时数组从小到大排序</span><br>        Arrays.sort(temp);<br>        <span class="hljs-comment">// 初始化左右指针</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = temp.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 不重合</span><br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>            <span class="hljs-comment">// 两数之和大于目标值, 将右边的指针左移</span><br>            <span class="hljs-keyword">if</span> (temp[i] + temp[j] &gt; target) &#123;<br>                j--;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp[i] + temp[j] &lt; target) &#123;<br>                i++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// n为数组总长度</span><br>        <span class="hljs-keyword">int</span> n = temp.length;<br>        <span class="hljs-comment">// 循环找出临时数组中在传入数组中的下标, 并赋值给结果数组</span><br>        <span class="hljs-comment">// i&lt;n, i=n, 保证找到一个后不再重复指向同一个,&quot;移走&quot;指针</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++) &#123;<br>            <span class="hljs-keyword">if</span> (i &lt; n &amp;&amp; temp[i] == nums[k]) &#123;<br>                res[<span class="hljs-number">0</span>] = k;<br>                i = n;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j &lt; n &amp;&amp; temp[j] == nums[k]) &#123;<br>                res[<span class="hljs-number">1</span>] = k;<br>                j = n;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. 两数之和 (HashMap)</title>
    <link href="/2021/05/08/leetcode/twoSum2/"/>
    <url>/2021/05/08/leetcode/twoSum2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution2</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Integer, Integer&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt; nums.length; i++)&#123;<br>            map.put(nums[i], i);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt; nums.length; i++)&#123;<br>            <span class="hljs-keyword">int</span> aim = target-nums[i];<br>            <span class="hljs-keyword">if</span>(map.containsKey(aim) &amp;&amp; map.get(aim) != i)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;i, map.get(aim)&#125;;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>HashMap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zoj1037</title>
    <link href="/2021/05/08/zoj/zoj1037/"/>
    <url>/2021/05/08/zoj/zoj1037/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">zoj1037</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> total,m,n;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0</span>;<br>        total = in.nextInt();<br>        <span class="hljs-keyword">while</span>(total &gt; <span class="hljs-number">0</span>)&#123;<br>            m = in.nextInt();<br>            n = in.nextInt();<br>            count++;<br>            System.out.println(<span class="hljs-string">&quot;Scenario #&quot;</span>+count+<span class="hljs-string">&quot;:&quot;</span>);<br>            <span class="hljs-keyword">if</span>( m%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> || n%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                sum = m*n;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                sum = m*n +<span class="hljs-number">0.41</span>;<br>            &#125;<br>            System.out.printf(<span class="hljs-string">&quot;%#.2f\n&quot;</span>,sum);<br>            System.out.println();<br>            total --;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>zoj算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zoj1001</title>
    <link href="/2021/05/07/zoj/zoj1001/"/>
    <url>/2021/05/07/zoj/zoj1001/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">zoj1001</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">while</span> (in.hasNextInt()) &#123;<br>            <span class="hljs-keyword">int</span> a = in.nextInt();<br>            <span class="hljs-keyword">int</span> b = in.nextInt();<br>            System.out.println(a + b);<br>        &#125;<br>        in.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>zoj算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
